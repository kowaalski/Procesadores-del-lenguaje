
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\027\002" +
    "\000\002\030\002\000\002\003\012\000\002\031\002\000" +
    "\002\032\002\000\002\003\011\000\002\033\002\000\002" +
    "\034\002\000\002\003\013\000\002\035\002\000\002\036" +
    "\002\000\002\037\002\000\002\003\016\000\002\003\007" +
    "\000\002\003\003\000\002\040\002\000\002\003\006\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\006\000\002\004\003\000\002\004\005\000\002\004" +
    "\004\000\002\004\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\041\002\000" +
    "\002\026\006\000\002\026\003\000\002\015\005\000\002" +
    "\015\003\000\002\042\002\000\002\016\010\000\002\043" +
    "\002\000\002\016\010\000\002\044\002\000\002\022\006" +
    "\000\002\022\003\000\002\045\002\000\002\021\010\000" +
    "\002\020\003\000\002\020\003\000\002\020\002\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\010\005" +
    "\000\002\046\002\000\002\010\010\000\002\047\002\000" +
    "\002\010\006\000\002\010\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\004\000\002\050\002\000\002\023" +
    "\006\000\002\051\002\000\002\023\006\000\002\023\005" +
    "\000\002\052\002\000\002\017\014\000\002\005\003\000" +
    "\002\006\004\000\002\006\002\000\002\025\003\000\002" +
    "\024\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\050\002\ufffe\004\013\005\023\007\004\012" +
    "\022\014\016\016\006\017\021\021\036\022\032\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\032\007\004\012\022\016\006" +
    "\037\007\041\031\042\012\044\010\045\026\046\035\047" +
    "\037\050\011\051\027\001\002\000\004\012\243\001\002" +
    "\000\062\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\023\uffe7\025\212\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\052\uffe7\053\214\054\213\001\002" +
    "\000\006\013\uffcb\016\uffcb\001\002\000\054\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\023\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\052\uffcc" +
    "\001\002\000\006\013\uffc9\016\uffc9\001\002\000\032\007" +
    "\004\012\022\016\006\037\007\041\031\042\012\044\010" +
    "\045\026\046\035\047\037\050\011\051\027\001\002\000" +
    "\004\012\uffa6\001\002\000\046\004\ufff6\005\ufff6\007\ufff6" +
    "\012\ufff6\014\ufff6\016\ufff6\017\ufff6\021\ufff6\022\ufff6\037" +
    "\ufff6\041\ufff6\042\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\001\002\000\054\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\023\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\052\uffe2\001\002" +
    "\000\050\004\uffed\005\uffed\007\uffed\012\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\021\uffed\022\uffed\037\uffed\041\uffed" +
    "\042\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051" +
    "\uffed\001\002\000\022\006\055\007\056\010\060\011\057" +
    "\023\175\041\054\042\052\043\053\001\002\000\054\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\023\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\052\uffe1\001\002\000\004\012\uffab\001\002\000\032\007" +
    "\004\012\022\016\006\037\007\041\031\042\012\044\010" +
    "\045\026\046\035\047\037\050\011\051\027\001\002\000" +
    "\046\004\uffa8\005\uffa8\007\uffa8\012\uffa8\014\uffa8\016\uffa8" +
    "\017\uffa8\021\uffa8\022\uffa8\037\uffa8\041\uffa8\042\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\001\002" +
    "\000\054\002\uffee\004\uffee\005\uffee\007\uffee\012\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\037\uffee\041\uffee\042\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\001\002\000\054\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\023\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\052\uffeb\001" +
    "\002\000\006\013\uffca\016\uffca\001\002\000\010\037\007" +
    "\045\026\050\011\001\002\000\052\002\000\004\000\005" +
    "\000\007\000\012\000\014\000\015\000\016\000\017\000" +
    "\021\000\022\000\037\000\041\000\042\000\044\000\045" +
    "\000\046\000\047\000\050\000\051\000\001\002\000\032" +
    "\007\004\012\022\016\006\037\007\041\031\042\012\044" +
    "\010\045\026\046\035\047\037\050\011\051\027\001\002" +
    "\000\004\012\161\001\002\000\054\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\023\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\052\uffe3\001\002" +
    "\000\050\002\157\004\013\005\023\007\004\012\022\014" +
    "\016\016\006\017\021\021\036\022\032\037\007\041\031" +
    "\042\012\044\010\045\026\046\035\047\037\050\011\051" +
    "\027\001\002\000\054\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\013\uffce\014\uffce\015\uffce\023\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\052\uffce\001\002\000\004\012" +
    "\uffa7\001\002\000\054\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\023\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\052\uffcd\001\002\000\004\012" +
    "\135\001\002\000\004\012\ufff9\001\002\000\004\016\044" +
    "\001\002\000\054\006\uffea\007\uffea\010\uffea\011\uffea\013" +
    "\uffea\014\uffea\015\uffea\023\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\052\uffea\001\002\000\056\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\023" +
    "\uffc3\025\047\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\040\046\041\uffc3\042\uffc3\043" +
    "\uffc3\052\uffc3\001\002\000\054\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\013\uffe5\014\uffe5\015\uffe5\023\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\052\uffe5\001\002\000" +
    "\004\016\uffc5\001\002\000\032\007\004\012\022\016\006" +
    "\037\007\041\031\042\012\044\010\045\026\046\035\047" +
    "\037\050\011\051\027\001\002\000\054\006\055\007\056" +
    "\010\060\011\057\013\uffc8\014\uffc8\015\uffc8\023\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\040\051\041\054\042\052\043\053\052\uffc8\001" +
    "\002\000\004\016\uffc7\001\002\000\054\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\013\uffbf\014\uffbf\015\uffbf\023\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\052\uffbf\001" +
    "\002\000\032\007\004\012\022\016\006\037\007\041\031" +
    "\042\012\044\010\045\026\046\035\047\037\050\011\051" +
    "\027\001\002\000\054\006\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\023\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\052\uffc1\001\002\000\032\007" +
    "\004\012\022\016\006\037\007\041\031\042\012\044\010" +
    "\045\026\046\035\047\037\050\011\051\027\001\002\000" +
    "\032\007\004\012\022\016\006\037\007\041\031\042\012" +
    "\044\010\045\026\046\035\047\037\050\011\051\027\001" +
    "\002\000\032\007\004\012\022\016\006\037\007\041\031" +
    "\042\012\044\010\045\026\046\035\047\037\050\011\051" +
    "\027\001\002\000\032\007\004\012\022\016\006\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\054\006\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\013\uffbc\014\uffbc\015\uffbc\023\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\040\uffbc\041\054\042\052\043\uffbc\052\uffbc\001\002\000" +
    "\054\006\uffbb\007\uffbb\010\uffbb\011\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\023\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb\041\054\042\052" +
    "\043\uffbb\052\uffbb\001\002\000\054\006\uffbd\007\uffbd\010" +
    "\060\011\057\013\uffbd\014\uffbd\015\uffbd\023\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\040\uffbd\041\054\042\052\043\053\052\uffbd\001\002" +
    "\000\054\006\uffbe\007\uffbe\010\060\011\057\013\uffbe\014" +
    "\uffbe\015\uffbe\023\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\040\uffbe\041\054\042" +
    "\052\043\053\052\uffbe\001\002\000\054\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\013\uffba\014\uffba\015\uffba\023\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\036\uffba\040\uffba\041\054\042\052\043\uffba\052\uffba\001" +
    "\002\000\004\016\044\001\002\000\054\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\023\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\052\uffc6\001" +
    "\002\000\004\016\044\001\002\000\054\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\023\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\052\uffc4\001" +
    "\002\000\004\012\073\001\002\000\034\007\004\012\077" +
    "\016\006\026\074\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\034" +
    "\007\004\012\077\016\006\026\074\037\007\041\031\042" +
    "\012\044\010\045\026\046\035\047\037\050\011\051\027" +
    "\001\002\000\010\013\ufff8\027\122\030\124\001\002\000" +
    "\034\006\055\007\056\010\060\011\057\031\111\032\106" +
    "\033\113\034\110\035\112\036\107\041\054\042\052\043" +
    "\053\001\002\000\034\007\004\012\077\016\006\026\074" +
    "\037\007\041\031\042\012\044\010\045\026\046\035\047" +
    "\037\050\011\051\027\001\002\000\010\013\123\027\122" +
    "\030\124\001\002\000\036\006\055\007\056\010\060\011" +
    "\057\013\105\031\111\032\106\033\113\034\110\035\112" +
    "\036\107\041\054\042\052\043\053\001\002\000\006\013" +
    "\103\016\044\001\002\000\032\007\004\012\022\016\006" +
    "\037\007\041\031\042\012\044\010\045\026\046\035\047" +
    "\037\050\011\051\027\001\002\000\054\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\023\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\052\uffe8\001" +
    "\002\000\054\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\023\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\052\uffe9\001\002\000\032\007\004\012" +
    "\022\016\006\037\007\041\031\042\012\044\010\045\026" +
    "\046\035\047\037\050\011\051\027\001\002\000\032\007" +
    "\004\012\022\016\006\037\007\041\031\042\012\044\010" +
    "\045\026\046\035\047\037\050\011\051\027\001\002\000" +
    "\032\007\004\012\022\016\006\037\007\041\031\042\012" +
    "\044\010\045\026\046\035\047\037\050\011\051\027\001" +
    "\002\000\032\007\004\012\022\016\006\037\007\041\031" +
    "\042\012\044\010\045\026\046\035\047\037\050\011\051" +
    "\027\001\002\000\032\007\004\012\022\016\006\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\032\007\004\012\022\016\006" +
    "\037\007\041\031\042\012\044\010\045\026\046\035\047" +
    "\037\050\011\051\027\001\002\000\030\006\055\007\056" +
    "\010\060\011\057\013\uffb7\023\uffb7\027\uffb7\030\uffb7\041" +
    "\054\042\052\043\053\001\002\000\030\006\055\007\056" +
    "\010\060\011\057\013\uffb8\023\uffb8\027\uffb8\030\uffb8\041" +
    "\054\042\052\043\053\001\002\000\030\006\055\007\056" +
    "\010\060\011\057\013\uffb5\023\uffb5\027\uffb5\030\uffb5\041" +
    "\054\042\052\043\053\001\002\000\030\006\055\007\056" +
    "\010\060\011\057\013\uffb6\023\uffb6\027\uffb6\030\uffb6\041" +
    "\054\042\052\043\053\001\002\000\030\006\055\007\056" +
    "\010\060\011\057\013\uffb9\023\uffb9\027\uffb9\030\uffb9\041" +
    "\054\042\052\043\053\001\002\000\030\006\055\007\056" +
    "\010\060\011\057\013\uffb4\023\uffb4\027\uffb4\030\uffb4\041" +
    "\054\042\052\043\053\001\002\000\034\007\uffb2\012\uffb2" +
    "\016\uffb2\026\uffb2\037\uffb2\041\uffb2\042\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\001\002\000\012" +
    "\013\uffae\023\uffae\027\uffae\030\uffae\001\002\000\034\007" +
    "\uffb0\012\uffb0\016\uffb0\026\uffb0\037\uffb0\041\uffb0\042\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\001" +
    "\002\000\034\007\004\012\077\016\006\026\074\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\012\013\uffaf\023\uffaf\027\122" +
    "\030\uffaf\001\002\000\034\007\004\012\077\016\006\026" +
    "\074\037\007\041\031\042\012\044\010\045\026\046\035" +
    "\047\037\050\011\051\027\001\002\000\012\013\uffb1\023" +
    "\uffb1\027\uffb1\030\uffb1\001\002\000\004\013\132\001\002" +
    "\000\046\004\013\005\023\007\004\012\022\014\016\016" +
    "\006\017\021\021\036\022\032\037\007\041\031\042\012" +
    "\044\010\045\026\046\035\047\037\050\011\051\027\001" +
    "\002\000\054\002\ufff7\004\ufff7\005\ufff7\007\ufff7\012\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\037\ufff7\041\ufff7\042\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\001\002\000\012\013\uffb3\023" +
    "\uffb3\027\uffb3\030\uffb3\001\002\000\032\007\004\012\022" +
    "\016\006\037\007\041\031\042\012\044\010\045\026\046" +
    "\035\047\037\050\011\051\027\001\002\000\024\006\055" +
    "\007\056\010\060\011\057\023\ufff3\041\054\042\052\043" +
    "\053\052\140\001\002\000\004\023\147\001\002\000\032" +
    "\007\004\012\022\016\006\037\007\041\031\042\012\044" +
    "\010\045\026\046\035\047\037\050\011\051\027\001\002" +
    "\000\022\006\055\007\056\010\060\011\057\013\142\041" +
    "\054\042\052\043\053\001\002\000\004\014\uffad\001\002" +
    "\000\004\014\144\001\002\000\046\004\013\005\023\007" +
    "\004\012\022\014\016\016\006\017\021\021\036\022\032" +
    "\037\007\041\031\042\012\044\010\045\026\046\035\047" +
    "\037\050\011\051\027\001\002\000\004\015\146\001\002" +
    "\000\054\002\uffac\004\uffac\005\uffac\007\uffac\012\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\037\uffac\041\uffac\042\uffac\044\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\001\002\000\034\007\004\012\077" +
    "\016\006\026\074\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\010" +
    "\023\ufff2\027\122\030\124\001\002\000\004\023\152\001" +
    "\002\000\032\007\004\012\022\016\006\037\007\041\031" +
    "\042\012\044\010\045\026\046\035\047\037\050\011\051" +
    "\027\001\002\000\022\006\055\007\056\010\060\011\057" +
    "\013\ufff1\041\054\042\052\043\053\001\002\000\004\013" +
    "\155\001\002\000\046\004\013\005\023\007\004\012\022" +
    "\014\016\016\006\017\021\021\036\022\032\037\007\041" +
    "\031\042\012\044\010\045\026\046\035\047\037\050\011" +
    "\051\027\001\002\000\054\002\ufff0\004\ufff0\005\ufff0\007" +
    "\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\037\ufff0\041\ufff0\042\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002\000\004" +
    "\002\001\001\002\000\052\002\uffff\004\uffff\005\uffff\007" +
    "\uffff\012\uffff\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff" +
    "\022\uffff\037\uffff\041\uffff\042\uffff\044\uffff\045\uffff\046" +
    "\uffff\047\uffff\050\uffff\051\uffff\001\002\000\032\007\004" +
    "\012\022\016\006\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\022" +
    "\006\055\007\056\010\060\011\057\013\163\041\054\042" +
    "\052\043\053\001\002\000\004\023\164\001\002\000\054" +
    "\002\uffef\004\uffef\005\uffef\007\uffef\012\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\037\uffef" +
    "\041\uffef\042\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050" +
    "\uffef\051\uffef\001\002\000\054\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\013\uffc2\014\uffc2\015\uffc2\023\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\052\uffc2\001\002\000" +
    "\004\016\170\001\002\000\054\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\013\uffe4\014\uffe4\015\uffe4\023\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\052\uffe4\001\002\000" +
    "\054\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\023\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\040\171\041\uffdd\042\uffdd" +
    "\043\uffdd\052\uffdd\001\002\000\004\016\uffdf\001\002\000" +
    "\004\016\170\001\002\000\054\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\013\uffde\014\uffde\015\uffde\023\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\040\uffde\041\uffde\042\uffde\043\uffde\052\uffde\001\002\000" +
    "\022\006\055\007\056\010\060\011\057\013\105\041\054" +
    "\042\052\043\053\001\002\000\054\002\ufffd\004\ufffd\005" +
    "\ufffd\007\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\037\ufffd\041\ufffd\042\ufffd\044" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\001\002" +
    "\000\050\004\013\005\023\007\004\012\022\014\016\015" +
    "\ufffe\016\006\017\021\021\036\022\032\037\007\041\031" +
    "\042\012\044\010\045\026\046\035\047\037\050\011\051" +
    "\027\001\002\000\050\004\013\005\023\007\004\012\022" +
    "\014\016\015\200\016\006\017\021\021\036\022\032\037" +
    "\007\041\031\042\012\044\010\045\026\046\035\047\037" +
    "\050\011\051\027\001\002\000\054\002\uffec\004\uffec\005" +
    "\uffec\007\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\037\uffec\041\uffec\042\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\001\002" +
    "\000\046\004\013\005\023\007\004\012\022\014\016\016" +
    "\006\017\021\021\036\022\032\037\007\041\031\042\012" +
    "\044\010\045\026\046\035\047\037\050\011\051\027\001" +
    "\002\000\004\004\203\001\002\000\004\012\204\001\002" +
    "\000\034\007\004\012\077\016\006\026\074\037\007\041" +
    "\031\042\012\044\010\045\026\046\035\047\037\050\011" +
    "\051\027\001\002\000\010\013\206\027\122\030\124\001" +
    "\002\000\004\023\ufff5\001\002\000\004\023\210\001\002" +
    "\000\054\002\ufff4\004\ufff4\005\ufff4\007\ufff4\012\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\037\ufff4\041\ufff4\042\ufff4\044\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\001\002\000\054\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\023\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\052\uffc0\001" +
    "\002\000\034\007\004\012\022\014\236\016\006\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\036\007\uffcf\012\uffcf\014\216" +
    "\015\217\016\uffcf\037\uffcf\041\uffcf\042\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\001\002\000\036" +
    "\007\uffcf\012\uffcf\014\216\015\217\016\uffcf\037\uffcf\041" +
    "\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\001\002\000\032\007\uffd8\012\uffd8\016\uffd8\037" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\001\002\000\076\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\023\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\001\002\000\076\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\023" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\001\002\000\032\007\004\012\022\016\006\037" +
    "\007\041\031\042\012\044\010\045\026\046\035\047\037" +
    "\050\011\051\027\001\002\000\054\006\055\007\056\010" +
    "\060\011\057\013\uffdb\014\uffdb\015\uffdb\023\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\040\uffdb\041\054\042\052\043\053\052\uffdb\001\002" +
    "\000\054\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\014" +
    "\216\015\217\023\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\040\223\041\uffcf\042" +
    "\uffcf\043\uffcf\052\uffcf\001\002\000\032\007\004\012\022" +
    "\016\006\037\007\041\031\042\012\044\010\045\026\046" +
    "\035\047\037\050\011\051\027\001\002\000\054\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\023" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\052" +
    "\uffd7\001\002\000\054\006\055\007\056\010\060\011\057" +
    "\013\uffdc\014\uffdc\015\uffdc\023\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc" +
    "\041\054\042\052\043\053\052\uffdc\001\002\000\032\007" +
    "\uffd3\012\uffd3\016\uffd3\037\uffd3\041\uffd3\042\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\001\002\000" +
    "\032\007\004\012\022\016\006\037\007\041\031\042\012" +
    "\044\010\045\026\046\035\047\037\050\011\051\027\001" +
    "\002\000\054\006\055\007\056\010\060\011\057\013\uffd4" +
    "\014\uffd4\015\uffd4\023\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\040\233\041\054" +
    "\042\052\043\053\052\uffd4\001\002\000\054\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\013\uffcf\014\216\015\217\023\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\052\uffcf" +
    "\001\002\000\054\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\023\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\052\uffd2\001\002\000\032\007\uffd6" +
    "\012\uffd6\016\uffd6\037\uffd6\041\uffd6\042\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\001\002\000\032" +
    "\007\004\012\022\016\006\037\007\041\031\042\012\044" +
    "\010\045\026\046\035\047\037\050\011\051\027\001\002" +
    "\000\054\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\023\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\052\uffd5\001\002\000\032\007\uffda\012\uffda" +
    "\016\uffda\037\uffda\041\uffda\042\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\001\002\000\054\006\055" +
    "\007\056\010\060\011\057\013\uffe6\014\uffe6\015\uffe6\023" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\040\uffe6\041\054\042\052\043\053\052" +
    "\uffe6\001\002\000\032\007\004\012\022\016\006\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\006\015\242\040\223\001\002" +
    "\000\054\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\023\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\052\uffd9\001\002\000\034\007\004\012\077" +
    "\016\006\026\074\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\010" +
    "\013\ufffc\027\122\030\124\001\002\000\004\013\246\001" +
    "\002\000\046\004\013\005\023\007\004\012\022\014\016" +
    "\016\006\017\021\021\036\022\032\037\007\041\031\042" +
    "\012\044\010\045\026\046\035\047\037\050\011\051\027" +
    "\001\002\000\054\002\ufffb\004\ufffb\005\ufffb\007\ufffb\012" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\037\ufffb\041\ufffb\042\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\001\002\000\054\002\uffa9" +
    "\004\uffa9\005\uffa9\007\uffa9\012\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\251\021\uffa9\022\uffa9\037\uffa9\041\uffa9" +
    "\042\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\001\002\000\046\004\013\005\023\007\004\012\022" +
    "\014\016\016\006\017\021\021\036\022\032\037\007\041" +
    "\031\042\012\044\010\045\026\046\035\047\037\050\011" +
    "\051\027\001\002\000\054\002\ufffa\004\ufffa\005\ufffa\007" +
    "\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\037\ufffa\041\ufffa\042\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\001\002\000\054" +
    "\002\uffaa\004\uffaa\005\uffaa\007\uffaa\012\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\037\uffaa" +
    "\041\uffaa\042\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\001\002\000\054\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\013\uffe0\014\uffe0\015\uffe0\023\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\052\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\036\002\033\003\027\004\016\005\004\007" +
    "\040\011\024\012\042\013\041\014\017\016\032\017\023" +
    "\021\014\024\037\025\013\001\001\000\020\004\253\011" +
    "\024\012\042\013\041\014\017\016\032\021\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\210\011\024" +
    "\012\042\013\041\014\017\016\032\021\014\001\001\000" +
    "\002\001\001\000\004\033\200\001\001\000\002\001\001" +
    "\000\004\040\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\173\011\024\012\042" +
    "\013\101\014\017\016\032\021\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\165\001\001\000\002\001\001\000\020\004" +
    "\164\011\024\012\042\013\041\014\017\016\032\021\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\157\004\016\005\004\007\040\011\024\012\042\013\041" +
    "\014\017\016\032\017\023\021\014\024\037\025\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\071\001\001\000\004\010" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\067\001\001\000\020\004\047\011" +
    "\024\012\042\013\041\014\017\016\032\021\014\001\001" +
    "\000\002\001\001\000\004\046\065\001\001\000\002\001" +
    "\001\000\020\004\064\011\024\012\042\013\041\014\017" +
    "\016\032\021\014\001\001\000\002\001\001\000\020\004" +
    "\063\011\024\012\042\013\041\014\017\016\032\021\014" +
    "\001\001\000\020\004\062\011\024\012\042\013\041\014" +
    "\017\016\032\021\014\001\001\000\020\004\061\011\024" +
    "\012\042\013\041\014\017\016\032\021\014\001\001\000" +
    "\020\004\060\011\024\012\042\013\041\014\017\016\032" +
    "\021\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\066\001\001\000\002\001\001\000\004\010\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\075" +
    "\011\024\012\042\013\041\014\017\016\032\021\014\023" +
    "\074\001\001\000\022\004\075\011\024\012\042\013\041" +
    "\014\017\016\032\021\014\023\133\001\001\000\004\032" +
    "\130\001\001\000\002\001\001\000\022\004\100\011\024" +
    "\012\042\013\101\014\017\016\032\021\014\023\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\044" +
    "\001\001\000\020\004\103\011\024\012\042\013\041\014" +
    "\017\016\032\021\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\120\011\024\012\042\013\041\014" +
    "\017\016\032\021\014\001\001\000\020\004\117\011\024" +
    "\012\042\013\041\014\017\016\032\021\014\001\001\000" +
    "\020\004\116\011\024\012\042\013\041\014\017\016\032" +
    "\021\014\001\001\000\020\004\115\011\024\012\042\013" +
    "\041\014\017\016\032\021\014\001\001\000\020\004\114" +
    "\011\024\012\042\013\041\014\017\016\032\021\014\001" +
    "\001\000\020\004\113\011\024\012\042\013\041\014\017" +
    "\016\032\021\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\126\001\001\000\002\001" +
    "\001\000\004\051\124\001\001\000\022\004\075\011\024" +
    "\012\042\013\041\014\017\016\032\021\014\023\125\001" +
    "\001\000\002\001\001\000\022\004\075\011\024\012\042" +
    "\013\041\014\017\016\032\021\014\023\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\132\004\016" +
    "\005\004\007\040\011\024\012\042\013\041\014\017\016" +
    "\032\017\023\021\014\024\037\025\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\135\011\024\012" +
    "\042\013\041\014\017\016\032\021\014\001\001\000\004" +
    "\035\136\001\001\000\002\001\001\000\020\004\140\011" +
    "\024\012\042\013\041\014\017\016\032\021\014\001\001" +
    "\000\002\001\001\000\004\052\142\001\001\000\002\001" +
    "\001\000\034\003\144\004\016\005\004\007\040\011\024" +
    "\012\042\013\041\014\017\016\032\017\023\021\014\024" +
    "\037\025\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\075\011\024\012\042\013\041\014\017\016" +
    "\032\021\014\023\147\001\001\000\004\036\150\001\001" +
    "\000\002\001\001\000\020\004\152\011\024\012\042\013" +
    "\041\014\017\016\032\021\014\001\001\000\004\037\153" +
    "\001\001\000\002\001\001\000\034\003\155\004\016\005" +
    "\004\007\040\011\024\012\042\013\041\014\017\016\032" +
    "\017\023\021\014\024\037\025\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\161" +
    "\011\024\012\042\013\041\014\017\016\032\021\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\171\001\001\000\004" +
    "\026\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\002\176\003\027\004\016\005\004" +
    "\007\040\011\024\012\042\013\041\014\017\016\032\017" +
    "\023\021\014\024\037\025\013\001\001\000\034\003\157" +
    "\004\016\005\004\007\040\011\024\012\042\013\041\014" +
    "\017\016\032\017\023\021\014\024\037\025\013\001\001" +
    "\000\002\001\001\000\034\003\201\004\016\005\004\007" +
    "\040\011\024\012\042\013\041\014\017\016\032\017\023" +
    "\021\014\024\037\025\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\075\011\024\012\042\013\041" +
    "\014\017\016\032\021\014\023\204\001\001\000\002\001" +
    "\001\000\004\034\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\236\011\024\012" +
    "\042\013\041\014\017\016\032\021\014\001\001\000\004" +
    "\020\225\001\001\000\004\020\214\001\001\000\004\043" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\220\011\024\012\042\013\041\014\017\015\221\016" +
    "\032\021\014\001\001\000\002\001\001\000\004\020\223" +
    "\001\001\000\020\004\224\011\024\012\042\013\041\014" +
    "\017\016\032\021\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\226\001\001\000\022\004\227\011" +
    "\024\012\042\013\041\014\017\016\032\021\014\022\230" +
    "\001\001\000\002\001\001\000\004\020\231\001\001\000" +
    "\002\001\001\000\004\044\233\001\001\000\022\004\227" +
    "\011\024\012\042\013\041\014\017\016\032\021\014\022" +
    "\234\001\001\000\002\001\001\000\004\042\237\001\001" +
    "\000\002\001\001\000\022\004\220\011\024\012\042\013" +
    "\041\014\017\015\240\016\032\021\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\075\011\024\012" +
    "\042\013\041\014\017\016\032\021\014\023\243\001\001" +
    "\000\004\027\244\001\001\000\002\001\001\000\034\003" +
    "\246\004\016\005\004\007\040\011\024\012\042\013\041" +
    "\014\017\016\032\017\023\021\014\024\037\025\013\001" +
    "\001\000\004\030\247\001\001\000\004\006\251\001\001" +
    "\000\034\003\252\004\016\005\004\007\040\011\024\012" +
    "\042\013\041\014\017\016\032\017\023\021\014\024\037" +
    "\025\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String primEtiq;
    public DosEtiquetas dosEtiq;
    public String salidaEtiq;
    public String aux;
    public String masMenos;
    public String tipoVariable;
    public int contador;
    public String arrayOriginal;
    public String auxTipoSet;
    public String auxIndice;
    public String auxTipo2;
    public String auxSet;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Lista_de_Sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Lista_de_Sent ::= Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_Sent ::= Lista_de_Sent Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_Sent ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Expresion PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, iff); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= prIF AP Condicion NT$0 CP Sentencia NT$1 prELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Generator.salida(Generator.LABEL, null, null, iff);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              String RESULT =null;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, whilee);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= prWHILE NT$2 AP Condicion NT$3 CP Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, whilee); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              String RESULT =null;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, doo.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c.v()); Generator.salida(Generator.GOTO, null, null, doo.v()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= prDO NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
Generator.salida(Generator.LABEL, null, null, forr.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= prFOR AP Expresion NT$6 PYC Condicion NT$7 PYC Expresion NT$8 CP Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 //Si es un print normal sacamos por pantalla, print var, pero si es un print de un character hay que sacar printc, mientras que si es un print de un set entonces hay que hacer la aranoya de SET que hay en generator
                                                            if(TablaSimbolos.esSet(e)){
                                                                Generator.salida(sym.SET, null, null, e);

                                                            }else if(TablaSimbolos.getTipo(e).equals("CHAR")){
                                                                Generator.salida(Generator.PRINTC,e,null,null);

                                                            }else{
                                                                Generator.salida(sym.PRINT, null, null, e);
                                                            }
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= prForEspeciales 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
TablaSimbolos.anadirNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= ALL NT$9 Lista_de_Sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TablaSimbolos.quitarNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= Operador 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= Incr 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= AP Ids CP Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 // (int)... MAS COSAS
                                                            String t = Generator.nuevaTemp();
                                                            String resCasteo="";

                                                            TablaSimbolos.put(t,i);                         //Guardamos var con su tipo
                                                            resCasteo=TablaSimbolos.castElemOVariable(e,i); //Casteamos el num a pelo o variable (dependiendo de lo que nos pasen)
                                                            TablaSimbolos.putElemVar(t, resCasteo);         //Guardamos var con su valor bien casteado
                                                            Generator.salida(sym.IDENT, e, i, t ); 
                                                            RESULT=t;

                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  //Compruebo si existe en nuestro dict de de sets y nuestro dic de var
                                                            if(TablaSimbolos.esSet(i)){ //Para comprobar si esta declarada (guardada en nuestro dict)
                                                                RESULT = i;
                                                            }else{                            //Var normal, la cual si no existe el get dara error
                                                                RESULT = i + TablaSimbolos.get(i);
                                                            }
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= IDENT IGUAL Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  //PLXC.out.println("--------------"+i +" = "+ e);
                                                            String var=TablaSimbolos.quitarAmbito(i); //Le quito el ambito a todo por si acaso, ya que en mi dict lo guardo todo sin ambito, pero a la hora de imprimir hay que hacerlo con el ambito!
                                                            String var_a_Asignar=TablaSimbolos.quitarAmbito(e);
                                                            
                                                            if(TablaSimbolos.esSet(i)){
                                                                RESULT=i;
                                                                auxSet=i;
                                                            }else{
                                                                RESULT = i + TablaSimbolos.get(i);
                                                            }
                                                            if(TablaSimbolos.comprobacionASIG_SET(i,e)){ // a=b siendo a y b arrays
                                                                    // PLXC.out.println("----DENTRO---");
                                                                    TablaSimbolos.VolcarArrayAux_a_Original_SET(i,e,true);
                                                           
                                                            }else{ // int x ; x=5.7 ERROR /// float x ; x=5 BIEN --> x= (float) 5
                                                                String[] tipos = TablaSimbolos.calcGetTipos(var,var_a_Asignar); //Devuelve el tipo de i , e //FLOAT,INT
                                                                String   tipo  = TablaSimbolos.comprobarCompatibilidadTipos(tipos[0],var_a_Asignar);// Si son incompatibles salta error, sino
                                                                String resCasteo=TablaSimbolos.getElemVar(var_a_Asignar); //Si "e" es un numero a pelo, devuelve ese numero, si es una variable su valor asociado
                                                                // PLXC.out.println("tipos--> "+i+": "+tipos[0]+"   "+e+": "+tipos[1]);
                                                                // PLXC.out.println("RESULTADO OPERACION TIPO: "+tipo);
                                                                // PLXC.out.println("DENTRO 3");

                                                                if (tipo.equals("CASTING")){
                                                                    resCasteo=TablaSimbolos.castElemOVariable(var_a_Asignar,tipos[0]); //Casteamos el num a pelo o variable (dependiendo de lo que nos pasen)
                                                                    TablaSimbolos.putElemVar(i,resCasteo);
                                                                    Generator.salida(sym.IDENT, e, tipos[0], RESULT );
                                                                
                                                                }else{
                                                                    Generator.salida(sym.IDENT, e, null, RESULT);
                                                                    TablaSimbolos.putElemVar(i,resCasteo);

                                                                }
                                                            }


                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= Ids Var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= SET Ids declarar_set 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expresion ::= AsignarElem_a_Set 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= RemoveElem_set 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expresion ::= RecogerBasico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); Generator.salida(sym.MINUS, e, null, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.putSet(i,tipoVariable);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declarar_set ::= IDENT COMA NT$10 declarar_set 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_set",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declarar_set ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.putSet(i,tipoVariable);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_set",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LeerElementosSet ::= LeerElementosSet COMA Expresion 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.putElementoSet(t,e); Generator.salida(Generator.ARRAY,String.valueOf(contador),e ,t); contador++ ;RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerElementosSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LeerElementosSet ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                                           if(TablaSimbolos.esSet(e)){
                                                                RESULT=e;
                                                            }else{
                                                                String t_aux=Generator.nuevaTemp(); //Array auxiliar para guardarlo todo
                                                                TablaSimbolos.putSet(t_aux,auxTipoSet);
                                                                TablaSimbolos.putElementoSet(t_aux,e);
                                                                //Meto el elemento en el set original
                                                                // TablaSimbolos.putElementoSet(auxSet,e);
                                                                Generator.salida(Generator.ARRAY,String.valueOf(contador),e ,t_aux); // x[i] = algo
                                                                contador++;
                                                                RESULT=t_aux;

                                                            }

                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerElementosSet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$11 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxTipoSet=TablaSimbolos.getTipoSet(i);auxSet=i; Generator.asig_Array_ALL=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AsignarElem_a_Set ::= IDENT IGUAL ALL NT$11 LeerElementosSet CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Generator.asig_Array_ALL=false;TablaSimbolos.VolcarArrayAux_a_Original_SET(i,t,false);contador=0; RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsignarElem_a_Set",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$12 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxTipoSet=TablaSimbolos.getTipoSet(i);auxSet=i; Generator.asig_Array_ALL=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AsignarElem_a_Set ::= IDENT OPADD prAll NT$12 LeerElementosSet prAll 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                                                                                                                                                          Generator.asig_Array_ALL=false;
                                                                                                                                                          TablaSimbolos.VolcarArrayAux_a_Original_SET(i,t,false);
                                                                                                                                                          contador=0;
                                                                                                                                                          RESULT=i;
                                 
                                
                                                                                                                                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsignarElem_a_Set",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$13 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.operatoriaBorrarElementoSet(auxSet, e);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LeerParaBorrarElem_set ::= Expresion COMA NT$13 LeerParaBorrarElem_set 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerParaBorrarElem_set",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LeerParaBorrarElem_set ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.operatoriaBorrarElementoSet(auxSet, e);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerParaBorrarElem_set",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$14 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxSet=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RemoveElem_set ::= IDENT OPREMOVE prAll NT$14 LeerParaBorrarElem_set prAll 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RemoveElem_set",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // prAll ::= ALL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prAll",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // prAll ::= CLL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prAll",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // prAll ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prAll",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RecogerBasico ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecogerBasico",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RecogerBasico ::= REAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecogerBasico",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RecogerBasico ::= LETRA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecogerBasico",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Ids ::= INT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="INT";     tipoVariable="INT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Ids ::= FLOAT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="FLOAT";   tipoVariable="FLOAT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Ids ::= CHAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="CHAR";    tipoVariable="CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Var ::= IDENT IGUAL Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.put(i, tipoVariable); TablaSimbolos.putElemVar(i,e); Generator.salida(sym.IDENT, e, null, i+TablaSimbolos.get(i) ); RESULT = i+TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$15 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.put(i, tipoVariable); TablaSimbolos.putElemVar(i,e); Generator.salida(sym.IDENT, e, null, i+TablaSimbolos.get(i) ); RESULT = i+TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Var ::= IDENT IGUAL Expresion COMA NT$15 Var 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$16 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.put(i, tipoVariable);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Var ::= IDENT COMA NT$16 Var 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Var ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.put(i, tipoVariable); RESULT = i+TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Incr ::= MASMAS Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                        // PLXC.out.println("MASMAS_PRIMERO");
                                        Generator.salida(sym.MASMAS, null, null, i); 
                                        TablaSimbolos.putElemVarMASMAS(i);  //sumamos uno al valor asociado de la variable  
                                        RESULT = i; 
                                        
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Incr ::= Expresion MASMAS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                        String t=Generator.nuevaTemp();
                                        String tipo=TablaSimbolos.float_int_char_variable(i);
                                        String resul;
                                        if(tipo.equals("VARIABLE")){
                                            resul = TablaSimbolos.getTipo(i);
                                        }else{
                                            resul=tipo;

                                        }

                                        TablaSimbolos.put(t,resul);
                                        TablaSimbolos.putElemVar(t,i);
                                        TablaSimbolos.putElemVarMASMAS(i);

                                        Generator.salida(sym.IDENT,i,null,t);
                                        Generator.salida(sym.MASMAS, null, null, i);
                                        RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Incr ::= MENOSMENOS Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Generator.salida(sym.MENOSMENOS, null, null, i); RESULT = i; 
                                       TablaSimbolos.putElemVarMENOSMENOS(i); 
                                        RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Incr ::= Expresion MENOSMENOS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String t=Generator.nuevaTemp();
                                       String tipo=TablaSimbolos.float_int_char_variable(i);
                                       String resul;
                                       if(tipo.equals("VARIABLE")){
                                            resul = TablaSimbolos.getTipo(i);
                                       }else{
                                            resul=tipo;

                                       }

                                       TablaSimbolos.put(t,resul);
                                       TablaSimbolos.putElemVar(t,i);
                                       TablaSimbolos.putElemVarMASMAS(i);
                                       Generator.salida(sym.IDENT,i,null,t);
                                       Generator.salida(sym.MENOSMENOS, null, null, i);
                                       RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operador ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); //Todo esto es por si me pasaran por ejemplo 2.5 un numero, que esta en String, pues lo que hago es que mi funcion float_int_char_variable me devuelve FLOAT, si le paso una variable pues devuelve "VARIABLE" en este caso buscare en mi diccionario de que tipo es esa variable, es decir dependiendo de lo que reciba por e1 e2, tendre que buscar o no en mi diccionario
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2); //Dentro de esta func se le quita el ambito
                                                        //   PLXC.out.println("variable: "+e1+"  "+e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]);

                                                          //Lo del split es por lo de los ambito, si nos pasan algo asi: a_2 quitarle el _2, y buscar solo la "a" en nuestro dict ya que la guardamos asi, solo usamos a_2 para imprimir
                                                          String ee1=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e1)); //Si son num a pelos, te devuelve ese num a pelo, si es variable su elemento asociado
                                                          String ee2=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e2));
                                                        //   PLXC.out.println("AMBITO VAR1 QUITADO: "+TablaSimbolos.quitarAmbito(e1)+ "  ///  AMBITO VAR2 QUITADO: "+TablaSimbolos.quitarAmbito(e2));
                                                          String resulOperacion="";

                                                        //   PLXC.out.println("VALOR ELEMENTO "+e1+ ": " +ee1 + "   VALOR ELEMENTO  "+e2+": "+ee2 );

                                                          TablaSimbolos.put(RESULT,resul); //Metemos variable con su tipo
                                                          if(resul.equals("INT")){
                                                            resulOperacion=String.valueOf(Integer.parseInt(ee1)+Integer.parseInt(ee2));
                                                            // PLXC.out.println("DENTRO --> VALOR ELEMENTO "+e1+ ": " +ee1 + "   VALOR ELEMENTO  "+e2+": "+ee2+ " -- APLICAMOS SUMA-->" +Integer.parseInt(ee1)+" + "+Integer.parseInt(ee2)+" = "+resulOperacion);
                                                            TablaSimbolos.putElemVar(RESULT,resulOperacion); //Metemos variable con su valor asociado correspondiente
                                                          }else{
                                                            resulOperacion=String.valueOf(Double.parseDouble(ee1)+Double.parseDouble(ee2));
                                                            TablaSimbolos.putElemVar(RESULT,String.valueOf(Double.parseDouble(ee1)+Double.parseDouble(ee2)));
                                                          }

                                                          Generator.salida(sym.MAS, e1, e2, RESULT);
                                                        
                                                          //PLXC.out.println("RESULTADO OPERACION: "+resul);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Operador ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp();
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]);
                                                          String ee1=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e1)); //Si son num a pelos, te devuelve ese num a pelo, si es variable su elemento asociado
                                                          String ee2=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e2));
                                                          String resulOperacion="";

                                                        //   PLXC.out.println("VALOR ELEMENTO "+e1+ ": " +ee1 + "   VALOR ELEMENTO  "+e2+": "+ee2 );

                                                          TablaSimbolos.put(RESULT,resul); //Metemos variable con su tipo
                                                          if(resul.equals("INT")){
                                                            resulOperacion=String.valueOf(Integer.parseInt(ee1)-Integer.parseInt(ee2));
                                                            // PLXC.out.println("DENTRO --> VALOR ELEMENTO "+e1+ ": " +ee1 + "   VALOR ELEMENTO  "+e2+": "+ee2+ " -- APLICAMOS SUMA-->" +Integer.parseInt(ee1)+" + "+Integer.parseInt(ee2)+" = "+resulOperacion);
                                                            TablaSimbolos.putElemVar(RESULT,resulOperacion); //Metemos variable con su valor asociado correspondiente
                                                          }else{
                                                            resulOperacion=String.valueOf(Double.parseDouble(ee1)-Double.parseDouble(ee2));
                                                            TablaSimbolos.putElemVar(RESULT,String.valueOf(Double.parseDouble(ee1)+Double.parseDouble(ee2)));
                                                          }

                                                          Generator.salida(sym.MENOS, e1, e2, RESULT);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Operador ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp();
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]);
                                                          String ee1=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e1)); //Si son num a pelos, te devuelve ese num a pelo, si es variable su elemento asociado
                                                          String ee2=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e2));
                                                          String resulOperacion="";

                                                        //   PLXC.out.println("VALOR ELEMENTO "+e1+ ": " +ee1 + "   VALOR ELEMENTO  "+e2+": "+ee2 );

                                                          TablaSimbolos.put(RESULT,resul); //Metemos variable con su tipo
                                                          if(resul.equals("INT")){
                                                            resulOperacion=String.valueOf(Integer.parseInt(ee1)*Integer.parseInt(ee2));
                                                            // PLXC.out.println("DENTRO --> VALOR ELEMENTO "+e1+ ": " +ee1 + "   VALOR ELEMENTO  "+e2+": "+ee2+ " -- APLICAMOS SUMA-->" +Integer.parseInt(ee1)+" + "+Integer.parseInt(ee2)+" = "+resulOperacion);
                                                            TablaSimbolos.putElemVar(RESULT,resulOperacion); //Metemos variable con su valor asociado correspondiente
                                                          }else{
                                                            resulOperacion=String.valueOf(Double.parseDouble(ee1)*Double.parseDouble(ee2));
                                                            TablaSimbolos.putElemVar(RESULT,String.valueOf(Double.parseDouble(ee1)+Double.parseDouble(ee2)));
                                                          }

                                                          Generator.salida(sym.POR, e1, e2, RESULT);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Operador ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp();
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]);
                                                          String ee1=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e1)); //Si son num a pelos, te devuelve ese num a pelo, si es variable su elemento asociado
                                                          String ee2=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e2));
                                                          String resulOperacion="";

                                                        //   PLXC.out.println("VALOR ELEMENTO "+e1+ ": " +ee1 + "   VALOR ELEMENTO  "+e2+": "+ee2 );

                                                          TablaSimbolos.put(RESULT,resul); //Metemos variable con su tipo
                                                          if(resul.equals("INT")){
                                                            resulOperacion=String.valueOf(Integer.parseInt(ee1)/Integer.parseInt(ee2));
                                                            // PLXC.out.println("DENTRO --> VALOR ELEMENTO "+e1+ ": " +ee1 + "   VALOR ELEMENTO  "+e2+": "+ee2+ " -- APLICAMOS SUMA-->" +Integer.parseInt(ee1)+" + "+Integer.parseInt(ee2)+" = "+resulOperacion);
                                                            TablaSimbolos.putElemVar(RESULT,resulOperacion); //Metemos variable con su valor asociado correspondiente
                                                          }else{
                                                            resulOperacion=String.valueOf(Double.parseDouble(ee1)/Double.parseDouble(ee2));
                                                            TablaSimbolos.putElemVar(RESULT,String.valueOf(Double.parseDouble(ee1)+Double.parseDouble(ee2)));
                                                          }

                                                          Generator.salida(sym.DIV, e1, e2, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Operador ::= Expresion MOD Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp1 = Generator.nuevaTemp(); Generator.salida(sym.DIV, e1, e2, temp1); String temp2 = Generator.nuevaTemp(); Generator.salida(sym.POR, temp1, e2, temp2); temp1 = Generator.nuevaTemp(); Generator.salida(sym.MENOS, e1, temp2, temp1); RESULT = temp1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Condicion ::= Expresion EQ Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condicion ::= Expresion NE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= Expresion LT Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2,  RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Condicion ::= Expresion LE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1,  RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Condicion ::= Expresion GT Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1,  RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Condicion ::= Expresion GE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2,  RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Condicion ::= NOT Condicion 
            {
              DosEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.swap(); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$17 ::= 
            {
              DosEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Condicion ::= Condicion AND NT$17 Condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.f()); Generator.salida(Generator.GOTO, null, null, c2.f()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$18 ::= 
            {
              DosEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condicion ::= Condicion OR NT$18 Condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.v()); Generator.salida(Generator.GOTO, null, null, c2.v()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Condicion ::= AP Condicion CP 
            {
              DosEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$19 ::= 
            {
              String RESULT =null;
		int dosEtiqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dosEtiqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas dosEtiq = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                                                                    //Por si la variable de control es de distinto tipo que el array lanzamos error
                                                                    String tipoe1=TablaSimbolos.getTipo_desde_VarOSet(e);
                                                                    String tipoe2=TablaSimbolos.getTipo_desde_VarOSet(e2);
                                                                    if(!tipoe1.equals(tipoe2)){
                                                                        PLXC.out.println("#Tipos incompatibles en for in \nerror;");
                                                                        System.exit(-1);
                                                                    }
                                                                    String etiq=Generator.nuevaLabel();
                                                                    String t=Generator.nuevaTemp();
                                                                    Generator.salida(sym.IDENT,"-1",null,t);
                                                                    Generator.salida(Generator.LABEL,null,null,dosEtiq.v());
                                                                    Generator.salida(sym.IDENT,t+" + 1",null,t);

                                                                    //Tenemos que recorrer un set sino da error.
                                                                    if(TablaSimbolos.esSet(e2)){
                                                                        Generator.salida(Generator.IFGOTO, t+" < ", TablaSimbolos.getTamSet(e2),etiq);
                                                                    }else{
                                                                        PLXC.out.println("#Tipo incorrecto, en el for in hay que recorrer un set \nerror;");
                                                                        System.exit(-1);
                                                                    }
                                                                    Generator.salida(Generator.GOTO, null, null, dosEtiq.f());
                                                                    Generator.salida(Generator.LABEL, null, null, etiq);


                                                                    Generator.salida(Generator.ASIG_ARRAY,e2,t,e);


                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // prForEspeciales ::= prFOR AP Expresion DOSPUNTOS Expresion CP NT$19 ALL Sentencia CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dosEtiqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dosEtiqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DosEtiquetas dosEtiq = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 Generator.salida(Generator.GOTO, null, null, dosEtiq.v()); Generator.salida(Generator.LABEL, null, null, dosEtiq.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prForEspeciales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // prIF ::= IF 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prIF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // prELSE ::= ELSE Sentencia 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // prELSE ::= 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // prDO ::= DO 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // prFOR ::= FOR 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // prWHILE ::= WHILE 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prWHILE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
