import java_cup.runtime.*;

parser code
{:
    
    public String primEtiq;
    public DosEtiquetas dosEtiq;
    public String salidaEtiq;
    public String aux;
    public String masMenos;
    public String tipoVariable;
    public int contador;
    public String arrayOriginal;
    public String auxTipoArray;
    public String auxIndice;
    public String auxTipo2;

:};

//Para el ambito de las variables se guardan siempre con sus nombres tal cual se leen, lo que cambia es que en los RESULT= i + TablaSimbolos.get(i); (QUE DARA VAR_2) y a la hora de GENERATOR.SALIDA se imprimen con ese RESULT VAR_1

nonterminal String Lista_de_Sent, Sentencia, Expresion, prIF, prELSE, prWHILE, Var, Operador, Incr, Ids, TiposNum, AsignarElem_a_Array ,LeerElementosArray ,prForEspeciales, ExpresionForIN;
nonterminal DosEtiquetas Condicion, prFOR, prDO;

terminal String WHILE, DO, MAS, MENOS, POR, DIV, AP, CP, ALL, CLL, IDENT, IF, ELSE, FOR, PRINT, PYC, MINUS, IGUAL, NOT, AND, OR, GT, GE, LT, LE, NE, EQ, INT, COMA, MASMAS, MENOSMENOS, MOD, LETRA, FLOAT, ENTERO, REAL, CHAR, ACOR, CCOR, IN;

precedence left WHILE, DO, ENTERO, IDENT, IF, FOR, PRINT, INT, REAL, FLOAT, ALL, IGUAL, CHAR, LETRA;
precedence left COMA;
precedence left ELSE;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left LT, GT, LE, GE, EQ, NE;
precedence left MAS, MENOS;
precedence left POR, DIV, MOD;
precedence left MASMAS, MENOSMENOS;
precedence left AP, CP;
precedence left MINUS;

start with Lista_de_Sent;

Lista_de_Sent ::= Sentencia
    | Lista_de_Sent Sentencia
    |
    ;

Sentencia ::= Expresion:e PYC                           {:RESULT = e;:}
    | prIF:iff AP Condicion:c                           {:Generator.salida(Generator.LABEL, null, null, c.v());:} CP Sentencia {:Generator.salida(Generator.GOTO, null, null, iff); Generator.salida(Generator.LABEL, null, null, c.f());:} prELSE {:Generator.salida(Generator.LABEL, null, null, iff);:}
    | prWHILE:whilee                                    {:Generator.salida(Generator.LABEL, null, null, whilee);:} AP Condicion:c {:Generator.salida(Generator.LABEL, null, null, c.v());:} CP Sentencia {:Generator.salida(Generator.GOTO, null, null, whilee); Generator.salida(Generator.LABEL, null, null, c.f());:}
    | prDO:doo                                          {:Generator.salida(Generator.LABEL, null, null, doo.v()); :} Sentencia WHILE AP Condicion:c CP {:Generator.salida(Generator.LABEL, null, null, c.v()); Generator.salida(Generator.GOTO, null, null, doo.v()); Generator.salida(Generator.LABEL, null, null, c.f());:} PYC
    | prFOR:forr AP Expresion                           {:Generator.salida(Generator.LABEL, null, null, forr.v());:} PYC Condicion:c {:Generator.salida(Generator.LABEL, null, null, forr.f());:} PYC Expresion {:Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());:} CP Sentencia {:Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());:}                                          
    | prForEspeciales
    | PRINT AP Expresion:e CP PYC                       {:Generator.salida(sym.PRINT, null, null, e);:}
    | ALL                                               {:TablaSimbolos.anadirNivel();:} Lista_de_Sent CLL {:TablaSimbolos.quitarNivel();:}
    ;


Expresion ::= Operador:o                                {:RESULT = o;:}
    | Incr:var                                          {:RESULT = var;:}
    | AP Expresion:e CP                                 {:RESULT = e;:}
    | AP Ids:i CP Expresion:e                           {: // (int)... MAS COSAS
                                                            String t = Generator.nuevaTemp();
                                                            TablaSimbolos.put(t,i);
                                                            Generator.salida(sym.IDENT, e, i, t );
                                                            RESULT=t;

                                                        :}
    | IDENT:i                                           {:  //Compruebo si existe en nuestro dict de de arrays y nuestro dic de var
                                                            if(TablaSimbolos.existeArray(i)){ //Para comprobar si esta declarada (guardada en nuestro dict)
                                                                RESULT=i;
                                                            }else{                            //Var normal, la cual si no existe el get dara error
                                                                RESULT = i + TablaSimbolos.get(i);
                                                            }
                                                        :}

    | IDENT:i IGUAL Expresion:e                         {:
                                                            if(TablaSimbolos.existeArray(i)){
                                                                RESULT=i;
                                                            }else{
                                                                RESULT = i + TablaSimbolos.get(i);
                                                            }

                                                            if(TablaSimbolos.comprobacionASIG_Arrays(i,e)){ // a=b siendo a y b arrays
                                                                    TablaSimbolos.VolcarArrayAux_a_Original(i,e,Integer.parseInt(TablaSimbolos.getTamArray(e)));
                                                            }else{ // int x ; x=5.7 ERROR /// float x ; x=5 BIEN --> x= (float) 5
                                                                String[] tipos = TablaSimbolos.calcGetTipos(i,e); //Devuelve el tipo de i , e //FLOAT,INT
                                                                String   tipo  = TablaSimbolos.comprobarCompatibilidadTipos(tipos[0],e);// Si son incompatibles salta error, sino
                                                                if (tipo.equals("CASTING")){
                                                                    //String t = Generator.nuevaTemp();
                                                                    //TablaSimbolos.put(t,tipos[0]);
                                                                    Generator.salida(sym.IDENT, e, tipos[0], RESULT );
                                                                }else{
                                                                    Generator.salida(sym.IDENT, e, null, RESULT);
                                                                }
                                                            }
                                                           

                                                        :}

                                                        // hace esto _t=x[4] y guarda en el diccionario la variable _t con el tipo del array que es
    | IDENT:i ACOR Expresion:e CCOR                     {:String t = Generator.nuevaTemp(); String tipoArray=TablaSimbolos.getTipoArray(i);TablaSimbolos.put(t,tipoArray);Generator.salida(Generator.ASIG_ARRAY,i,e,t); RESULT=t;:} 
    | AsignarElem_a_Array:a                             {:RESULT=a;:}
    | Ids Var:v                                         {:RESULT = v;:} // Donde declaramos las cosas y las guardamos en el dict
    | TiposNum:e                                        {:RESULT = e;:}
    | MENOS Expresion:e                                 {:RESULT = Generator.nuevaTemp(); Generator.salida(sym.MINUS, e, null, RESULT);:}
    %prec MINUS;


                        // a[5] = 6                                           //TablaSimbolos.comprobacionRango(i,e);
AsignarElem_a_Array::= IDENT:i ACOR Expresion:e CCOR IGUAL Expresion:e2{:
                                                                            if(!TablaSimbolos.existeArray(i)){
                                                                                System.out.println("# Variable no declarada");
                                                                                System.exit(-1);
                                                                            }
                                                                             
                                                                            TablaSimbolos.comprobarRangoArray(i,e);
                                                                             
                                                                            Generator.salida(Generator.ARRAY, e ,e2 ,i); :} 

                      //a={1,4,6} //Aqui no hay castings, si es a tipo INT entonces todos int sino error. Por ello activo Generator.asig_Array_ALL para que el generator sepa que no hay que parsear
                      |IDENT:i IGUAL ALL{:auxTipoArray=TablaSimbolos.getTipoArray(i); Generator.asig_Array_ALL=true;:} LeerElementosArray:t CLL {:Generator.asig_Array_ALL=false; TablaSimbolos.putArray(t,TablaSimbolos.getTipoArray(i),String.valueOf(contador));TablaSimbolos.VolcarArrayAux_a_Original(i,t,contador);contador=0; RESULT=i; :};


// 1,2+3,1+x para leer esto, que vendria llamada desde arriba o desde Var:: desde arriba AsignarElem_a_Array a={1,2+3,1+x}
LeerElementosArray ::= LeerElementosArray:t COMA Expresion:e {:Generator.salida(Generator.ARRAY,String.valueOf(contador),e ,t); contador++ ;RESULT=t; :} 
                      |Expresion:e                           {:String t_aux=Generator.nuevaTemp(); 
                                                               
                                                               //Estas 3 lineas son para que funcione el for in, con los tipos
                                                               auxTipo2=TablaSimbolos.float_int_variable(e); 
                                                               if(auxTipo2.equals("VARIABLE")){
                                                                auxTipo2=TablaSimbolos.getTipo(e);
                                                               }

                                                               TablaSimbolos.putArray(t_aux,auxTipoArray);
                                                               Generator.salida(Generator.ARRAY,String.valueOf(contador),e ,t_aux); 
                                                               contador++; 
                                                               RESULT=t_aux; :};                                                             






TiposNum::=ENTERO:e {:RESULT=e;:}
          |REAL:e   {:RESULT=e;:};

Ids::= INT:e    {:RESULT="INT";     tipoVariable="INT";:}
      |FLOAT:e  {:RESULT="FLOAT";   tipoVariable="FLOAT";:}
      |CHAR:e   {:RESULT="CHAR";    tipoVariable="CHAR";:};

  
//Donde decalramos las cosas y ya guardamos                                                        //TablaSimbolos.comprobarCompatibilidadTipos(tipoVariable, e);
Var ::= IDENT:i IGUAL Expresion:e                         {:TablaSimbolos.put(i, tipoVariable); Generator.salida(sym.IDENT, e, null, i+TablaSimbolos.get(i) ); RESULT = i+TablaSimbolos.get(i);:}
      | IDENT:i IGUAL Expresion:e COMA                    {:TablaSimbolos.put(i, tipoVariable); Generator.salida(sym.IDENT, e, null, i+TablaSimbolos.get(i) ); RESULT = i+TablaSimbolos.get(i);:} Var
      | IDENT:i COMA                                      {:TablaSimbolos.put(i, tipoVariable);:} Var:v
      | IDENT:i                                           {:TablaSimbolos.put(i, tipoVariable); RESULT = i+TablaSimbolos.get(i);:}          
      | IDENT:i ACOR Expresion:e CCOR                     {://Array x[5]
                                                            if(TablaSimbolos.float_int_variable(e).equals("VARIABLE")){
                                                                PLXC.out.println("error: El tam del array no puede ser una variable \nhalt;");
                                                                
                                                                System.exit(-1);
                                                            }

                                                            //Generator.salida(sym.IDENT,e ,null ,"$"+i+"_length");
                                                            TablaSimbolos.putArray(i, tipoVariable, e); 
                                                            RESULT = i;:} 

     //Array x[3]={1,2,3}                                                     
     | IDENT:i ACOR Expresion:e CCOR{:                      
                                                            if(TablaSimbolos.float_int_variable(e).equals("VARIABLE")){
                                                                PLXC.out.println("error: El tam del array no puede ser una variable \nhalt;");
                                                                
                                                                System.exit(-1);
                                                            }

                                                            //Generator.salida(sym.IDENT,e ,null ,"$"+i+"_length");
                                                            TablaSimbolos.putArray(i, tipoVariable, e); 
                                                            RESULT = i;:} IGUAL ALL{:auxTipoArray=TablaSimbolos.getTipoArray(i);Generator.asig_Array_ALL=true; :} LeerElementosArray:t CLL {:Generator.asig_Array_ALL=false;TablaSimbolos.putArray(t,TablaSimbolos.getTipoArray(i),String.valueOf(contador));TablaSimbolos.VolcarArrayAux_a_Original(i,t,contador);contador=0; RESULT=i;:};


Incr::= MASMAS Expresion:i          {: Generator.salida(sym.MASMAS, null, null, i); RESULT = i; :} 
        |Expresion:i MASMAS         {: 
                                        String t=Generator.nuevaTemp();
                                        String tipo=TablaSimbolos.float_int_variable(i);
                                        String resul;
                                        if(tipo.equals("VARIABLE")){
                                            resul = TablaSimbolos.getTipo(i);
                                        }else{
                                            resul=tipo;
                                            
                                        }

                                        TablaSimbolos.put(t,resul); 
                                        Generator.salida(sym.IDENT,i,null,t);
                                        Generator.salida(sym.MASMAS, null, null, i); 
                                        RESULT = t; :} 

        |MENOSMENOS Expresion:i     {: Generator.salida(sym.MENOSMENOS, null, null, i); RESULT = i; :} 
        |Expresion:i MENOSMENOS     {: String t=Generator.nuevaTemp(); 
                                       String tipo=TablaSimbolos.float_int_variable(i);
                                       String resul;
                                       if(tipo.equals("VARIABLE")){
                                            resul = TablaSimbolos.getTipo(i);
                                       }else{
                                            resul=tipo;
                                            
                                       }

                                       TablaSimbolos.put(t,resul); 
                                       Generator.salida(sym.IDENT,i,null,t);
                                       Generator.salida(sym.MENOSMENOS, null, null, i); 
                                       RESULT = t; :};




Operador ::= Expresion:e1 MAS Expresion:e2              {:RESULT = Generator.nuevaTemp(); //Todo esto es por si me pasaran por ejemplo 2.5 un numero, que esta en String, pues lo que hago es que mi funcion float_int_variable me devuelve FLOAT, si le paso una variable pues devuelve "VARIABLE" en este caso buscare en mi diccionario de que tipo es esa variable, es decir dependiendo de lo que reciba por e1 e2, tendre que buscar o no en mi diccionario
                                                          
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          //PLXC.out.println("variable: "+e1+"  "+e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]); 
                                                          TablaSimbolos.put(RESULT,resul);
                                                          Generator.salida(sym.MAS, e1, e2, RESULT);
                                                          //PLXC.out.println("RESULTADO OPERACION: "+resul);
                                                        :}
                                                        
            |Expresion:e1 MENOS Expresion:e2            {:RESULT = Generator.nuevaTemp(); 
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]); 
                                                          TablaSimbolos.put(RESULT,resul); 
                                                          Generator.salida(sym.MENOS, e1, e2, RESULT);
                                                          //PLXC.out.println("RESULTADO OPERACION: "+resul);
                                                        :}
                                                        
            |Expresion:e1 POR Expresion:e2              {:RESULT = Generator.nuevaTemp(); 
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]); 
                                                          TablaSimbolos.put(RESULT,resul); 
                                                          Generator.salida(sym.POR, e1, e2, RESULT);
                                                        //   PLXC.out.println("RESULTADO OPERACION: "+resul);
                                                        :}

            |Expresion:e1 DIV Expresion:e2              {:RESULT = Generator.nuevaTemp(); 
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]); 
                                                          TablaSimbolos.put(RESULT,resul); 
                                                          Generator.salida(sym.DIV, e1, e2, RESULT);:}

            |Expresion:e1 MOD Expresion:e2              {:String temp1 = Generator.nuevaTemp(); Generator.salida(sym.DIV, e1, e2, temp1); String temp2 = Generator.nuevaTemp(); Generator.salida(sym.POR, temp1, e2, temp2); temp1 = Generator.nuevaTemp(); Generator.salida(sym.MENOS, e1, temp2, temp1); RESULT = temp1;:};


Condicion ::= Expresion:e1 EQ Expresion:e2              {:RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); :}
    | Expresion:e1 NE Expresion:e2                      {:RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); :}
    | Expresion:e1 LT Expresion:e2                      {:RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2,  RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); :}
    | Expresion:e1 LE Expresion:e2                      {:RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1,  RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); :}
    | Expresion:e1 GT Expresion:e2                      {:RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1,  RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); :}
    | Expresion:e1 GE Expresion:e2                      {:RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2,  RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); :}
    | NOT Condicion:c                                   {:c.swap(); RESULT = c;:}
    | Condicion:c1 AND                                  {:Generator.salida(Generator.LABEL, null, null, c1.v()); :} Condicion:c2 {:Generator.salida(Generator.LABEL, null, null, c1.f()); Generator.salida(Generator.GOTO, null, null, c2.f()); RESULT = c2;:}
    | Condicion:c1 OR                                   {:Generator.salida(Generator.LABEL, null, null, c1.f()); :} Condicion:c2 {:Generator.salida(Generator.LABEL, null, null, c1.v()); Generator.salida(Generator.GOTO, null, null, c2.v()); RESULT = c2;:}
    | AP Condicion:c CP                                 {:RESULT = c;:}
    ;




ExpresionForIN::= IDENT:i {:RESULT=i;:}
                 |IDENT:i ACOR Expresion:e CCOR{:auxIndice=e;RESULT=i;:};

prForEspeciales::= prFOR:dosEtiq ExpresionForIN:e IN Expresion:e2 DO{:  
                                                                    //Por si la variable de control es de distinto tipo que el array lanzamos error
                                                                    if(!TablaSimbolos.getTipo_desde_VarOArray(e).equals(TablaSimbolos.getTipo_desde_VarOArray(e2))){
                                                                        PLXC.out.println("#Tipos incompatibles en for in \nerror;");
                                                                        System.exit(-1);
                                                                    }
                                                                    String etiq=Generator.nuevaLabel();
                                                                    String t=Generator.nuevaTemp();
                                                                    Generator.salida(sym.IDENT,"-1",null,t);
                                                                    Generator.salida(Generator.LABEL,null,null,dosEtiq.v()); 
                                                                    Generator.salida(sym.IDENT,t+" + 1",null,t);

                                                                    //Tenemos que recorrer un array sino da error.
                                                                    if(TablaSimbolos.existeArray(e2)){
                                                                        Generator.salida(Generator.IFGOTO, t+" < ", TablaSimbolos.getTamArray(e2),etiq); 
                                                                    }else{
                                                                        PLXC.out.println("#Tipo incorrecto, en el for in hay que recorrer un array \nerror;");
                                                                        System.exit(-1);
                                                                    }
                                                                    Generator.salida(Generator.GOTO, null, null, dosEtiq.f()); 
                                                                    Generator.salida(Generator.LABEL, null, null, etiq);

                                                                    //Por si la variable de control es algo asi: b[i]
                                                                    if(TablaSimbolos.existeArray(e)){
                                                                        String t3= Generator.nuevaTemp();
                                                                        Generator.salida(Generator.ASIG_ARRAY,e2,t,t3);
                                                                        Generator.salida(Generator.ARRAY,auxIndice,t3,e);
                                                                    }else{
                                                                        Generator.salida(Generator.ASIG_ARRAY,e2,t,e);
                                                                    }
                                                                    

                                                                :} ALL Sentencia CLL {: Generator.salida(Generator.GOTO, null, null, dosEtiq.v()); Generator.salida(Generator.LABEL, null, null, dosEtiq.f()); :}


                    |prFOR:dosEtiq ExpresionForIN:e IN ALL{:auxTipoArray=TablaSimbolos.float_int_variable(e); 
                                                        //Saco el tipo de e
                                                        if(auxTipoArray.equals("VARIABLE")){
                                                            if(TablaSimbolos.existeArray(e)){
                                                                auxTipoArray=TablaSimbolos.getTipoArray(e);
                                                            }else{
                                                                auxTipoArray=TablaSimbolos.getTipo(e);
                                                            }
                                                        }else{
                                                            auxTipoArray=auxTipoArray;

                                                        }

                                                        Generator.asig_Array_ALL=true;                                                        
                                                        
                                                        :} LeerElementosArray:t2 CLL {:Generator.asig_Array_ALL=false; TablaSimbolos.putArray(t2,auxTipo2,String.valueOf(contador));contador=0;:} DO {:  //Por si la variable de control es de distinto tipo que el array lanzamos error
                                                                                                                                                                                                    
                                                                                                                                                                                                    // PLXC.out.println("TIPOS: "+TablaSimbolos.getTipo_desde_VarOArray(e)+"        "+TablaSimbolos.getTipo_desde_VarOArray(t2));
                                                                                                                                                                                                    if(!TablaSimbolos.getTipo_desde_VarOArray(e).equals(TablaSimbolos.getTipo_desde_VarOArray(t2))){
                                                                                                                                                                                                        PLXC.out.println("#Tipos incompatibles en for in \nerror;");
                                                                                                                                                                                                        System.exit(-1);
                                                                                                                                                                                                    } 
                                                                                                                                                                                                    String etiq=Generator.nuevaLabel();
                                                                                                                                                                                                    String t=Generator.nuevaTemp();
                                                                                                                                                                                                    Generator.salida(sym.IDENT,"-1",null,t);
                                                                                                                                                                                                    Generator.salida(Generator.LABEL,null,null,dosEtiq.v()); 
                                                                                                                                                                                                    Generator.salida(sym.IDENT,t+" + 1",null,t);

                                                                                                                                                                                                    //Tenemos que recorrer un array sino da error.
                                                                                                                                                                                                    if(TablaSimbolos.existeArray(t2)){
                                                                                                                                                                                                            Generator.salida(Generator.IFGOTO, t+" < ", TablaSimbolos.getTamArray(t2),etiq); 
                                                                                                                                                                                                    }else{
                                                                                                                                                                                                            PLXC.out.println("#Tipo incorrecto, en el for in hay que recorrer un array \nerror;");
                                                                                                                                                                                                            System.exit(-1);
                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                
                                                                                                                                                                                                    Generator.salida(Generator.GOTO, null, null, dosEtiq.f()); 
                                                                                                                                                                                                    Generator.salida(Generator.LABEL, null, null, etiq);

                                                                                                                                                                                                    //Por si la variable de control es algo asi: b[i]
                                                                                                                                                                                                    if(TablaSimbolos.existeArray(e)){
                                                                                                                                                                                                        String t3= Generator.nuevaTemp();
                                                                                                                                                                                                        Generator.salida(Generator.ASIG_ARRAY,t2,t,t3);
                                                                                                                                                                                                        Generator.salida(Generator.ARRAY,auxIndice,t3,e);
                                                                                                                                                                                                    }else{
                                                                                                                                                                                                        Generator.salida(Generator.ASIG_ARRAY,t2,t,e);
                                                                                                                                                                                                    }
                                                                                                                                                                                                    

                                                                                                                                                                                                    :} ALL Sentencia CLL {: Generator.salida(Generator.GOTO, null, null, dosEtiq.v()); Generator.salida(Generator.LABEL, null, null, dosEtiq.f()); :};

prIF ::= IF {:RESULT = Generator.nuevaLabel();:};

prELSE ::= ELSE Sentencia {::} | {::};

prDO ::= DO {:RESULT = new DosEtiquetas();:};

prFOR ::= FOR {:RESULT = new DosEtiquetas();:};

prWHILE ::= WHILE {:RESULT = Generator.nuevaLabel();:};











