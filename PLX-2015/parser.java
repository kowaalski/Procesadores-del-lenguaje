
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\024\002" +
    "\000\002\025\002\000\002\003\012\000\002\026\002\000" +
    "\002\027\002\000\002\003\011\000\002\030\002\000\002" +
    "\031\002\000\002\003\013\000\002\032\002\000\002\033" +
    "\002\000\002\034\002\000\002\003\016\000\002\003\003" +
    "\000\002\003\007\000\002\035\002\000\002\003\006\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\006\000\002\004\003\000\002\004\005\000\002\004" +
    "\006\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\015\010\000\002\036\002\000" +
    "\002\015\010\000\002\016\005\000\002\016\003\000\002" +
    "\014\003\000\002\014\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\010\005\000\002\037\002" +
    "\000\002\010\010\000\002\040\002\000\002\010\006\000" +
    "\002\010\003\000\002\010\006\000\002\041\002\000\002" +
    "\042\002\000\002\010\014\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\004\000\002\043\002\000\002\021\006" +
    "\000\002\044\002\000\002\021\006\000\002\021\005\000" +
    "\002\020\003\000\002\020\006\000\002\045\002\000\002" +
    "\017\013\000\002\046\002\000\002\047\002\000\002\050" +
    "\002\000\002\017\017\000\002\005\003\000\002\006\004" +
    "\000\002\006\002\000\002\023\003\000\002\022\003\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\044\002\ufffe\004\013\005\022\007\004\012" +
    "\021\014\015\016\006\017\020\021\033\022\030\037\007" +
    "\041\027\042\012\045\025\046\032\047\034\050\011\001" +
    "\002\000\026\007\004\012\021\016\006\037\007\041\027" +
    "\042\012\045\025\046\032\047\034\050\011\001\002\000" +
    "\004\012\247\001\002\000\060\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\013\uffe7\015\uffe7\023\uffe7\025\234\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\051\235\052" +
    "\uffe7\001\002\000\006\013\uffd9\016\uffd9\001\002\000\054" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\015" +
    "\uffe2\023\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\052\uffe2\001\002\000\006\013\uffd7\016\uffd7\001\002" +
    "\000\026\007\004\012\021\016\006\037\007\041\027\042" +
    "\012\045\025\046\032\047\034\050\011\001\002\000\004" +
    "\012\uffaa\001\002\000\042\004\ufff6\005\ufff6\007\ufff6\012" +
    "\ufff6\014\ufff6\016\ufff6\017\ufff6\021\ufff6\022\ufff6\037\ufff6" +
    "\041\ufff6\042\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\001" +
    "\002\000\044\004\uffed\005\uffed\007\uffed\012\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed\037\uffed\041" +
    "\uffed\042\uffed\045\uffed\046\uffed\047\uffed\050\uffed\001\002" +
    "\000\054\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013" +
    "\uffe4\015\uffe4\023\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\052\uffe4\001\002\000\022\006\061\007\062" +
    "\010\064\011\063\023\217\041\060\042\057\043\056\001" +
    "\002\000\004\012\uffaf\001\002\000\026\007\004\012\021" +
    "\016\006\037\007\041\027\042\012\045\025\046\032\047" +
    "\034\050\011\001\002\000\042\004\uffac\005\uffac\007\uffac" +
    "\012\uffac\014\uffac\016\uffac\017\uffac\021\uffac\022\uffac\037" +
    "\uffac\041\uffac\042\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\001\002\000\050\002\uffef\004\uffef\005\uffef\007\uffef\012" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\037\uffef\041\uffef\042\uffef\045\uffef\046\uffef\047" +
    "\uffef\050\uffef\001\002\000\054\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\013\uffeb\015\uffeb\023\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\052\uffeb\001\002\000" +
    "\006\013\uffd8\016\uffd8\001\002\000\046\002\000\004\000" +
    "\005\000\007\000\012\000\014\000\015\000\016\000\017" +
    "\000\021\000\022\000\037\000\041\000\042\000\045\000" +
    "\046\000\047\000\050\000\001\002\000\026\007\004\012" +
    "\021\016\006\037\007\041\027\042\012\045\025\046\032" +
    "\047\034\050\011\001\002\000\004\012\211\001\002\000" +
    "\044\002\207\004\013\005\022\007\004\012\021\014\015" +
    "\016\006\017\020\021\033\022\030\037\007\041\027\042" +
    "\012\045\025\046\032\047\034\050\011\001\002\000\054" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb\015" +
    "\uffdb\023\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\052\uffdb\001\002\000\006\012\uffab\016\uffab\001\002" +
    "\000\054\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\013" +
    "\uffda\015\uffda\023\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\052\uffda\001\002\000\006\012\146\016\147" +
    "\001\002\000\004\016\052\001\002\000\004\012\ufff9\001" +
    "\002\000\054\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\013\uffea\015\uffea\023\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\052\uffea\001\002\000\004\012\042\001" +
    "\002\000\030\007\004\012\046\016\006\026\043\037\007" +
    "\041\027\042\012\045\025\046\032\047\034\050\011\001" +
    "\002\000\030\007\004\012\046\016\006\026\043\037\007" +
    "\041\027\042\012\045\025\046\032\047\034\050\011\001" +
    "\002\000\010\013\ufff8\027\133\030\134\001\002\000\034" +
    "\006\061\007\062\010\064\011\063\031\122\032\117\033" +
    "\124\034\121\035\123\036\120\041\060\042\057\043\056" +
    "\001\002\000\030\007\004\012\046\016\006\026\043\037" +
    "\007\041\027\042\012\045\025\046\032\047\034\050\011" +
    "\001\002\000\010\013\135\027\133\030\134\001\002\000" +
    "\036\006\061\007\062\010\064\011\063\013\116\031\122" +
    "\032\117\033\124\034\121\035\123\036\120\041\060\042" +
    "\057\043\056\001\002\000\006\013\053\016\052\001\002" +
    "\000\060\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\013" +
    "\uffd1\015\uffd1\023\uffd1\025\073\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\072\041" +
    "\uffd1\042\uffd1\043\uffd1\051\074\052\uffd1\001\002\000\026" +
    "\007\004\012\021\016\006\037\007\041\027\042\012\045" +
    "\025\046\032\047\034\050\011\001\002\000\054\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\015\uffe3\023" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\052" +
    "\uffe3\001\002\000\054\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\013\uffe8\015\uffe8\023\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\052\uffe8\001\002\000\026\007" +
    "\004\012\021\016\006\037\007\041\027\042\012\045\025" +
    "\046\032\047\034\050\011\001\002\000\054\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\013\uffc9\015\uffc9\023\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\052\uffc9" +
    "\001\002\000\054\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\013\uffcb\015\uffcb\023\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\052\uffcb\001\002\000\026\007\004" +
    "\012\021\016\006\037\007\041\027\042\012\045\025\046" +
    "\032\047\034\050\011\001\002\000\026\007\004\012\021" +
    "\016\006\037\007\041\027\042\012\045\025\046\032\047" +
    "\034\050\011\001\002\000\026\007\004\012\021\016\006" +
    "\037\007\041\027\042\012\045\025\046\032\047\034\050" +
    "\011\001\002\000\026\007\004\012\021\016\006\037\007" +
    "\041\027\042\012\045\025\046\032\047\034\050\011\001" +
    "\002\000\054\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\013\uffc6\015\uffc6\023\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\041\060" +
    "\042\057\043\uffc6\052\uffc6\001\002\000\054\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\015\uffc5\023\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\040\uffc5\041\060\042\057\043\uffc5\052\uffc5" +
    "\001\002\000\054\005\uffc7\006\uffc7\007\uffc7\010\064\011" +
    "\063\013\uffc7\015\uffc7\023\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\041" +
    "\060\042\057\043\056\052\uffc7\001\002\000\054\005\uffc8" +
    "\006\uffc8\007\uffc8\010\064\011\063\013\uffc8\015\uffc8\023" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\040\uffc8\041\060\042\057\043\056\052" +
    "\uffc8\001\002\000\054\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\013\uffc4\015\uffc4\023\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4" +
    "\041\060\042\057\043\uffc4\052\uffc4\001\002\000\004\016" +
    "\uffd3\001\002\000\026\007\004\012\021\016\006\037\007" +
    "\041\027\042\012\045\025\046\032\047\034\050\011\001" +
    "\002\000\026\007\004\012\021\016\006\037\007\041\027" +
    "\042\012\045\025\046\032\047\034\050\011\001\002\000" +
    "\022\006\061\007\062\010\064\011\063\041\060\042\057" +
    "\043\056\052\076\001\002\000\056\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\013\uffd0\015\uffd0\023\uffd0\025\uffcf" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\052\uffd0" +
    "\001\002\000\004\025\100\001\002\000\004\014\101\001" +
    "\002\000\026\007\uffce\012\uffce\016\uffce\037\uffce\041\uffce" +
    "\042\uffce\045\uffce\046\uffce\047\uffce\050\uffce\001\002\000" +
    "\026\007\004\012\021\016\006\037\007\041\027\042\012" +
    "\045\025\046\032\047\034\050\011\001\002\000\006\015" +
    "\106\040\105\001\002\000\024\006\061\007\062\010\064" +
    "\011\063\015\uffdc\040\uffdc\041\060\042\057\043\056\001" +
    "\002\000\026\007\004\012\021\016\006\037\007\041\027" +
    "\042\012\045\025\046\032\047\034\050\011\001\002\000" +
    "\054\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\013\uffcd" +
    "\015\uffcd\023\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\052\uffcd\001\002\000\024\006\061\007\062\010" +
    "\064\011\063\015\uffdd\040\uffdd\041\060\042\057\043\056" +
    "\001\002\000\054\005\uffd6\006\061\007\062\010\064\011" +
    "\063\013\uffd6\015\uffd6\023\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\040\111\041" +
    "\060\042\057\043\056\052\uffd6\001\002\000\004\016\uffd5" +
    "\001\002\000\004\016\052\001\002\000\054\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\015\uffd4\023\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\052\uffd4" +
    "\001\002\000\004\016\052\001\002\000\054\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\015\uffd2\023\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\052\uffd2" +
    "\001\002\000\054\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\013\uffe9\015\uffe9\023\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\052\uffe9\001\002\000\026\007\004" +
    "\012\021\016\006\037\007\041\027\042\012\045\025\046" +
    "\032\047\034\050\011\001\002\000\026\007\004\012\021" +
    "\016\006\037\007\041\027\042\012\045\025\046\032\047" +
    "\034\050\011\001\002\000\026\007\004\012\021\016\006" +
    "\037\007\041\027\042\012\045\025\046\032\047\034\050" +
    "\011\001\002\000\026\007\004\012\021\016\006\037\007" +
    "\041\027\042\012\045\025\046\032\047\034\050\011\001" +
    "\002\000\026\007\004\012\021\016\006\037\007\041\027" +
    "\042\012\045\025\046\032\047\034\050\011\001\002\000" +
    "\026\007\004\012\021\016\006\037\007\041\027\042\012" +
    "\045\025\046\032\047\034\050\011\001\002\000\030\006" +
    "\061\007\062\010\064\011\063\013\uffc1\023\uffc1\027\uffc1" +
    "\030\uffc1\041\060\042\057\043\056\001\002\000\030\006" +
    "\061\007\062\010\064\011\063\013\uffc2\023\uffc2\027\uffc2" +
    "\030\uffc2\041\060\042\057\043\056\001\002\000\030\006" +
    "\061\007\062\010\064\011\063\013\uffbf\023\uffbf\027\uffbf" +
    "\030\uffbf\041\060\042\057\043\056\001\002\000\030\006" +
    "\061\007\062\010\064\011\063\013\uffc0\023\uffc0\027\uffc0" +
    "\030\uffc0\041\060\042\057\043\056\001\002\000\030\006" +
    "\061\007\062\010\064\011\063\013\uffc3\023\uffc3\027\uffc3" +
    "\030\uffc3\041\060\042\057\043\056\001\002\000\030\006" +
    "\061\007\062\010\064\011\063\013\uffbe\023\uffbe\027\uffbe" +
    "\030\uffbe\041\060\042\057\043\056\001\002\000\030\007" +
    "\uffbc\012\uffbc\016\uffbc\026\uffbc\037\uffbc\041\uffbc\042\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\001\002\000\030\007" +
    "\uffba\012\uffba\016\uffba\026\uffba\037\uffba\041\uffba\042\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\001\002\000\012\013" +
    "\uffb8\023\uffb8\027\uffb8\030\uffb8\001\002\000\030\007\004" +
    "\012\046\016\006\026\043\037\007\041\027\042\012\045" +
    "\025\046\032\047\034\050\011\001\002\000\012\013\uffb9" +
    "\023\uffb9\027\133\030\uffb9\001\002\000\030\007\004\012" +
    "\046\016\006\026\043\037\007\041\027\042\012\045\025" +
    "\046\032\047\034\050\011\001\002\000\012\013\uffbb\023" +
    "\uffbb\027\uffbb\030\uffbb\001\002\000\004\013\143\001\002" +
    "\000\042\004\013\005\022\007\004\012\021\014\015\016" +
    "\006\017\020\021\033\022\030\037\007\041\027\042\012" +
    "\045\025\046\032\047\034\050\011\001\002\000\050\002" +
    "\ufff7\004\ufff7\005\ufff7\007\ufff7\012\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\037\ufff7\041" +
    "\ufff7\042\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\001\002" +
    "\000\012\013\uffbd\023\uffbd\027\uffbd\030\uffbd\001\002\000" +
    "\026\007\004\012\021\016\006\037\007\041\027\042\012" +
    "\045\025\046\032\047\034\050\011\001\002\000\006\051" +
    "\172\053\uffb7\001\002\000\004\053\151\001\002\000\030" +
    "\007\004\012\021\014\152\016\006\037\007\041\027\042" +
    "\012\045\025\046\032\047\034\050\011\001\002\000\026" +
    "\007\uffb3\012\uffb3\016\uffb3\037\uffb3\041\uffb3\042\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\001\002\000\022\005\154" +
    "\006\061\007\062\010\064\011\063\041\060\042\057\043" +
    "\056\001\002\000\004\014\uffb5\001\002\000\004\014\156" +
    "\001\002\000\042\004\013\005\022\007\004\012\021\014" +
    "\015\016\006\017\020\021\033\022\030\037\007\041\027" +
    "\042\012\045\025\046\032\047\034\050\011\001\002\000" +
    "\004\015\160\001\002\000\050\002\uffb4\004\uffb4\005\uffb4" +
    "\007\uffb4\012\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\037\uffb4\041\uffb4\042\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\001\002\000\026\007\004\012" +
    "\021\016\006\037\007\041\027\042\012\045\025\046\032" +
    "\047\034\050\011\001\002\000\006\015\163\040\105\001" +
    "\002\000\004\005\uffb2\001\002\000\004\005\165\001\002" +
    "\000\004\014\uffb1\001\002\000\004\014\167\001\002\000" +
    "\042\004\013\005\022\007\004\012\021\014\015\016\006" +
    "\017\020\021\033\022\030\037\007\041\027\042\012\045" +
    "\025\046\032\047\034\050\011\001\002\000\004\015\171" +
    "\001\002\000\050\002\uffb0\004\uffb0\005\uffb0\007\uffb0\012" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\037\uffb0\041\uffb0\042\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\001\002\000\026\007\004\012\021\016\006" +
    "\037\007\041\027\042\012\045\025\046\032\047\034\050" +
    "\011\001\002\000\022\006\061\007\062\010\064\011\063" +
    "\041\060\042\057\043\056\052\174\001\002\000\004\053" +
    "\uffb6\001\002\000\022\006\061\007\062\010\064\011\063" +
    "\023\ufff3\041\060\042\057\043\056\001\002\000\004\023" +
    "\177\001\002\000\030\007\004\012\046\016\006\026\043" +
    "\037\007\041\027\042\012\045\025\046\032\047\034\050" +
    "\011\001\002\000\010\023\ufff2\027\133\030\134\001\002" +
    "\000\004\023\202\001\002\000\026\007\004\012\021\016" +
    "\006\037\007\041\027\042\012\045\025\046\032\047\034" +
    "\050\011\001\002\000\022\006\061\007\062\010\064\011" +
    "\063\013\ufff1\041\060\042\057\043\056\001\002\000\004" +
    "\013\205\001\002\000\042\004\013\005\022\007\004\012" +
    "\021\014\015\016\006\017\020\021\033\022\030\037\007" +
    "\041\027\042\012\045\025\046\032\047\034\050\011\001" +
    "\002\000\050\002\ufff0\004\ufff0\005\ufff0\007\ufff0\012\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\037\ufff0\041\ufff0\042\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\001\002\000\004\002\001\001\002\000\046\002" +
    "\uffff\004\uffff\005\uffff\007\uffff\012\uffff\014\uffff\015\uffff" +
    "\016\uffff\017\uffff\021\uffff\022\uffff\037\uffff\041\uffff\042" +
    "\uffff\045\uffff\046\uffff\047\uffff\050\uffff\001\002\000\026" +
    "\007\004\012\021\016\006\037\007\041\027\042\012\045" +
    "\025\046\032\047\034\050\011\001\002\000\022\006\061" +
    "\007\062\010\064\011\063\013\213\041\060\042\057\043" +
    "\056\001\002\000\004\023\214\001\002\000\050\002\uffee" +
    "\004\uffee\005\uffee\007\uffee\012\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\037\uffee\041\uffee" +
    "\042\uffee\045\uffee\046\uffee\047\uffee\050\uffee\001\002\000" +
    "\054\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc" +
    "\015\uffcc\023\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\052\uffcc\001\002\000\022\006\061\007\062\010" +
    "\064\011\063\013\116\041\060\042\057\043\056\001\002" +
    "\000\050\002\ufffd\004\ufffd\005\ufffd\007\ufffd\012\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\037\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\001\002\000\044\004\013\005\022\007\004\012\021" +
    "\014\015\015\ufffe\016\006\017\020\021\033\022\030\037" +
    "\007\041\027\042\012\045\025\046\032\047\034\050\011" +
    "\001\002\000\044\004\013\005\022\007\004\012\021\014" +
    "\015\015\222\016\006\017\020\021\033\022\030\037\007" +
    "\041\027\042\012\045\025\046\032\047\034\050\011\001" +
    "\002\000\050\002\uffec\004\uffec\005\uffec\007\uffec\012\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\037\uffec\041\uffec\042\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\001\002\000\042\004\013\005\022\007\004\012" +
    "\021\014\015\016\006\017\020\021\033\022\030\037\007" +
    "\041\027\042\012\045\025\046\032\047\034\050\011\001" +
    "\002\000\004\004\225\001\002\000\004\012\226\001\002" +
    "\000\030\007\004\012\046\016\006\026\043\037\007\041" +
    "\027\042\012\045\025\046\032\047\034\050\011\001\002" +
    "\000\010\013\230\027\133\030\134\001\002\000\004\023" +
    "\ufff5\001\002\000\004\023\232\001\002\000\050\002\ufff4" +
    "\004\ufff4\005\ufff4\007\ufff4\012\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\037\ufff4\041\ufff4" +
    "\042\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\001\002\000" +
    "\054\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\013\uffca" +
    "\015\uffca\023\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\052\uffca\001\002\000\030\007\004\012\021\014" +
    "\242\016\006\037\007\041\027\042\012\045\025\046\032" +
    "\047\034\050\011\001\002\000\026\007\004\012\021\016" +
    "\006\037\007\041\027\042\012\045\025\046\032\047\034" +
    "\050\011\001\002\000\022\006\061\007\062\010\064\011" +
    "\063\041\060\042\057\043\056\052\237\001\002\000\056" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\015" +
    "\uffe5\023\uffe5\025\240\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\052\uffe5\001\002\000\026\007\004\012\021" +
    "\016\006\037\007\041\027\042\012\045\025\046\032\047" +
    "\034\050\011\001\002\000\054\005\uffe0\006\061\007\062" +
    "\010\064\011\063\013\uffe0\015\uffe0\023\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\040\uffe0\041\060\042\057\043\056\052\uffe0\001\002\000" +
    "\026\007\uffdf\012\uffdf\016\uffdf\037\uffdf\041\uffdf\042\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\001\002\000\054\005" +
    "\uffe6\006\061\007\062\010\064\011\063\013\uffe6\015\uffe6" +
    "\023\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\040\uffe6\041\060\042\057\043\056" +
    "\052\uffe6\001\002\000\026\007\004\012\021\016\006\037" +
    "\007\041\027\042\012\045\025\046\032\047\034\050\011" +
    "\001\002\000\006\015\246\040\105\001\002\000\054\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\013\uffde\015\uffde" +
    "\023\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\052\uffde\001\002\000\030\007\004\012\046\016\006\026" +
    "\043\037\007\041\027\042\012\045\025\046\032\047\034" +
    "\050\011\001\002\000\010\013\ufffc\027\133\030\134\001" +
    "\002\000\004\013\252\001\002\000\042\004\013\005\022" +
    "\007\004\012\021\014\015\016\006\017\020\021\033\022" +
    "\030\037\007\041\027\042\012\045\025\046\032\047\034" +
    "\050\011\001\002\000\050\002\ufffb\004\ufffb\005\ufffb\007" +
    "\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\037\ufffb\041\ufffb\042\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\001\002\000\050\002\uffad\004\uffad" +
    "\005\uffad\007\uffad\012\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\255\021\uffad\022\uffad\037\uffad\041\uffad\042\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\001\002\000\042\004" +
    "\013\005\022\007\004\012\021\014\015\016\006\017\020" +
    "\021\033\022\030\037\007\041\027\042\012\045\025\046" +
    "\032\047\034\050\011\001\002\000\050\002\ufffa\004\ufffa" +
    "\005\ufffa\007\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\037\ufffa\041\ufffa\042\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\001\002\000\050\002" +
    "\uffae\004\uffae\005\uffae\007\uffae\012\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\037\uffae\041" +
    "\uffae\042\uffae\045\uffae\046\uffae\047\uffae\050\uffae\001\002" +
    "\000\054\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\013" +
    "\uffe1\015\uffe1\023\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\052\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\034\002\030\003\025\004\016\005\004\007" +
    "\036\011\023\012\037\013\035\014\007\015\015\017\022" +
    "\022\034\023\013\001\001\000\016\004\257\011\023\012" +
    "\037\013\035\014\007\015\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\232\011\023\012\037\013\035" +
    "\014\007\015\015\001\001\000\002\001\001\000\004\030" +
    "\222\001\001\000\004\035\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\215\011" +
    "\023\012\037\013\050\014\007\015\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\214\011\023\012\037" +
    "\013\035\014\007\015\015\001\001\000\002\001\001\000" +
    "\032\003\207\004\016\005\004\007\036\011\023\012\037" +
    "\013\035\014\007\015\015\017\022\022\034\023\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\147\001\001\000\004\010\053\001\001\000" +
    "\004\026\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\044\011\023\012\037\013\035\014\007\015" +
    "\015\021\043\001\001\000\020\004\044\011\023\012\037" +
    "\013\035\014\007\015\015\021\144\001\001\000\004\027" +
    "\141\001\001\000\002\001\001\000\020\004\047\011\023" +
    "\012\037\013\050\014\007\015\015\021\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\053\001\001" +
    "\000\002\001\001\000\016\004\054\011\023\012\037\013" +
    "\035\014\007\015\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\070\011\023\012\037\013\035\014" +
    "\007\015\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\067\011\023\012\037\013\035\014\007\015" +
    "\015\001\001\000\016\004\066\011\023\012\037\013\035" +
    "\014\007\015\015\001\001\000\016\004\065\011\023\012" +
    "\037\013\035\014\007\015\015\001\001\000\016\004\064" +
    "\011\023\012\037\013\035\014\007\015\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\113\001\001\000" +
    "\016\004\107\011\023\012\037\013\035\014\007\015\015" +
    "\001\001\000\016\004\074\011\023\012\037\013\035\014" +
    "\007\015\015\001\001\000\002\001\001\000\004\041\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\101\001\001\000\020\004\103\011\023\012\037\013\035" +
    "\014\007\015\015\016\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\106\011\023\012\037\013\035" +
    "\014\007\015\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\111\001\001\000\004" +
    "\010\112\001\001\000\002\001\001\000\004\010\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\131" +
    "\011\023\012\037\013\035\014\007\015\015\001\001\000" +
    "\016\004\130\011\023\012\037\013\035\014\007\015\015" +
    "\001\001\000\016\004\127\011\023\012\037\013\035\014" +
    "\007\015\015\001\001\000\016\004\126\011\023\012\037" +
    "\013\035\014\007\015\015\001\001\000\016\004\125\011" +
    "\023\012\037\013\035\014\007\015\015\001\001\000\016" +
    "\004\124\011\023\012\037\013\035\014\007\015\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\137\001\001\000\004\044\135\001\001\000\002" +
    "\001\001\000\020\004\044\011\023\012\037\013\035\014" +
    "\007\015\015\021\136\001\001\000\002\001\001\000\020" +
    "\004\044\011\023\012\037\013\035\014\007\015\015\021" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\143\004\016\005\004\007\036\011\023\012\037\013" +
    "\035\014\007\015\015\017\022\022\034\023\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\174\011" +
    "\023\012\037\013\035\014\007\015\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\152\011\023\012" +
    "\037\013\035\014\007\015\015\001\001\000\004\046\160" +
    "\001\001\000\002\001\001\000\004\045\154\001\001\000" +
    "\002\001\001\000\032\003\156\004\016\005\004\007\036" +
    "\011\023\012\037\013\035\014\007\015\015\017\022\022" +
    "\034\023\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\103\011\023\012\037\013\035\014\007\015" +
    "\015\016\161\001\001\000\002\001\001\000\004\047\163" +
    "\001\001\000\002\001\001\000\004\050\165\001\001\000" +
    "\002\001\001\000\032\003\167\004\016\005\004\007\036" +
    "\011\023\012\037\013\035\014\007\015\015\017\022\022" +
    "\034\023\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\172\011\023\012\037\013\035\014\007\015" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\175\001\001\000\002\001\001\000\020\004\044\011" +
    "\023\012\037\013\035\014\007\015\015\021\177\001\001" +
    "\000\004\033\200\001\001\000\002\001\001\000\016\004" +
    "\202\011\023\012\037\013\035\014\007\015\015\001\001" +
    "\000\004\034\203\001\001\000\002\001\001\000\032\003" +
    "\205\004\016\005\004\007\036\011\023\012\037\013\035" +
    "\014\007\015\015\017\022\022\034\023\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\211\011\023\012\037\013\035\014\007\015\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\220\003\025\004\016\005\004\007\036\011\023" +
    "\012\037\013\035\014\007\015\015\017\022\022\034\023" +
    "\013\001\001\000\032\003\207\004\016\005\004\007\036" +
    "\011\023\012\037\013\035\014\007\015\015\017\022\022" +
    "\034\023\013\001\001\000\002\001\001\000\032\003\223" +
    "\004\016\005\004\007\036\011\023\012\037\013\035\014" +
    "\007\015\015\017\022\022\034\023\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\044\011\023\012" +
    "\037\013\035\014\007\015\015\021\226\001\001\000\002" +
    "\001\001\000\004\031\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\242\011\023" +
    "\012\037\013\035\014\007\015\015\001\001\000\016\004" +
    "\235\011\023\012\037\013\035\014\007\015\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\240\011" +
    "\023\012\037\013\035\014\007\015\015\001\001\000\002" +
    "\001\001\000\004\036\243\001\001\000\002\001\001\000" +
    "\020\004\103\011\023\012\037\013\035\014\007\015\015" +
    "\016\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\044\011\023\012\037\013\035\014\007\015\015" +
    "\021\247\001\001\000\004\024\250\001\001\000\002\001" +
    "\001\000\032\003\252\004\016\005\004\007\036\011\023" +
    "\012\037\013\035\014\007\015\015\017\022\022\034\023" +
    "\013\001\001\000\004\025\253\001\001\000\004\006\255" +
    "\001\001\000\032\003\256\004\016\005\004\007\036\011" +
    "\023\012\037\013\035\014\007\015\015\017\022\022\034" +
    "\023\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String primEtiq;
    public DosEtiquetas dosEtiq;
    public String salidaEtiq;
    public String aux;
    public String masMenos;
    public String tipoVariable;
    public int contador;
    public String arrayOriginal;
    public String auxTipoArray;
    public String auxIndice;
    public String auxTipo2;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Lista_de_Sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Lista_de_Sent ::= Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_Sent ::= Lista_de_Sent Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_Sent ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Expresion PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, iff); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= prIF AP Condicion NT$0 CP Sentencia NT$1 prELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Generator.salida(Generator.LABEL, null, null, iff);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              String RESULT =null;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, whilee);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= prWHILE NT$2 AP Condicion NT$3 CP Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, whilee); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              String RESULT =null;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, doo.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c.v()); Generator.salida(Generator.GOTO, null, null, doo.v()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= prDO NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
Generator.salida(Generator.LABEL, null, null, forr.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= prFOR AP Expresion NT$6 PYC Condicion NT$7 PYC Expresion NT$8 CP Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= prForEspeciales 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Generator.salida(sym.PRINT, null, null, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
TablaSimbolos.anadirNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= ALL NT$9 Lista_de_Sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TablaSimbolos.quitarNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= Operador 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= Incr 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= AP Ids CP Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 // (int)... MAS COSAS
                                                            String t = Generator.nuevaTemp();
                                                            TablaSimbolos.put(t,i);
                                                            Generator.salida(sym.IDENT, e, i, t );
                                                            RESULT=t;

                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  //Compruebo si existe en nuestro dict de de arrays y nuestro dic de var
                                                            if(TablaSimbolos.existeArray(i)){ //Para comprobar si esta declarada (guardada en nuestro dict)
                                                                RESULT=i;
                                                            }else{                            //Var normal, la cual si no existe el get dara error
                                                                RESULT = i + TablaSimbolos.get(i);
                                                            }
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= IDENT IGUAL Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            if(TablaSimbolos.existeArray(i)){
                                                                RESULT=i;
                                                            }else{
                                                                RESULT = i + TablaSimbolos.get(i);
                                                            }

                                                            if(TablaSimbolos.comprobacionASIG_Arrays(i,e)){ // a=b siendo a y b arrays
                                                                    TablaSimbolos.VolcarArrayAux_a_Original(i,e,Integer.parseInt(TablaSimbolos.getTamArray(e)));
                                                            }else{ // int x ; x=5.7 ERROR /// float x ; x=5 BIEN --> x= (float) 5
                                                                String[] tipos = TablaSimbolos.calcGetTipos(i,e); //Devuelve el tipo de i , e //FLOAT,INT
                                                                String   tipo  = TablaSimbolos.comprobarCompatibilidadTipos(tipos[0],e);// Si son incompatibles salta error, sino
                                                                if (tipo.equals("CASTING")){
                                                                    //String t = Generator.nuevaTemp();
                                                                    //TablaSimbolos.put(t,tipos[0]);
                                                                    Generator.salida(sym.IDENT, e, tipos[0], RESULT );
                                                                }else{
                                                                    Generator.salida(sym.IDENT, e, null, RESULT);
                                                                }
                                                            }
                                                           

                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= IDENT ACOR Expresion CCOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String t = Generator.nuevaTemp(); String tipoArray=TablaSimbolos.getTipoArray(i);TablaSimbolos.put(t,tipoArray);Generator.salida(Generator.ASIG_ARRAY,i,e,t); RESULT=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= AsignarElem_a_Array 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expresion ::= Ids Var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= TiposNum 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); Generator.salida(sym.MINUS, e, null, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AsignarElem_a_Array ::= IDENT ACOR Expresion CCOR IGUAL Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                            if(!TablaSimbolos.existeArray(i)){
                                                                                System.out.println("# Variable no declarada");
                                                                                System.exit(-1);
                                                                            }
                                                                             
                                                                            TablaSimbolos.comprobarRangoArray(i,e);
                                                                             
                                                                            Generator.salida(Generator.ARRAY, e ,e2 ,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsignarElem_a_Array",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxTipoArray=TablaSimbolos.getTipoArray(i); Generator.asig_Array_ALL=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AsignarElem_a_Array ::= IDENT IGUAL ALL NT$10 LeerElementosArray CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Generator.asig_Array_ALL=false; TablaSimbolos.putArray(t,TablaSimbolos.getTipoArray(i),String.valueOf(contador));TablaSimbolos.VolcarArrayAux_a_Original(i,t,contador);contador=0; RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsignarElem_a_Array",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LeerElementosArray ::= LeerElementosArray COMA Expresion 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.ARRAY,String.valueOf(contador),e ,t); contador++ ;RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerElementosArray",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LeerElementosArray ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String t_aux=Generator.nuevaTemp(); 
                                                               
                                                               //Estas 3 lineas son para que funcione el for in, con los tipos
                                                               auxTipo2=TablaSimbolos.float_int_variable(e); 
                                                               if(auxTipo2.equals("VARIABLE")){
                                                                auxTipo2=TablaSimbolos.getTipo(e);
                                                               }

                                                               TablaSimbolos.putArray(t_aux,auxTipoArray);
                                                               Generator.salida(Generator.ARRAY,String.valueOf(contador),e ,t_aux); 
                                                               contador++; 
                                                               RESULT=t_aux; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerElementosArray",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TiposNum ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposNum",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TiposNum ::= REAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposNum",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ids ::= INT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="INT";     tipoVariable="INT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Ids ::= FLOAT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="FLOAT";   tipoVariable="FLOAT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ids ::= CHAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="CHAR";    tipoVariable="CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Var ::= IDENT IGUAL Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.put(i, tipoVariable); Generator.salida(sym.IDENT, e, null, i+TablaSimbolos.get(i) ); RESULT = i+TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$11 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.put(i, tipoVariable); Generator.salida(sym.IDENT, e, null, i+TablaSimbolos.get(i) ); RESULT = i+TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Var ::= IDENT IGUAL Expresion COMA NT$11 Var 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$12 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.put(i, tipoVariable);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Var ::= IDENT COMA NT$12 Var 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Var ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.put(i, tipoVariable); RESULT = i+TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Var ::= IDENT ACOR Expresion CCOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//Array x[5]
                                                            if(TablaSimbolos.float_int_variable(e).equals("VARIABLE")){
                                                                PLXC.out.println("error: El tam del array no puede ser una variable \nhalt;");
                                                                
                                                                System.exit(-1);
                                                            }

                                                            //Generator.salida(sym.IDENT,e ,null ,"$"+i+"_length");
                                                            TablaSimbolos.putArray(i, tipoVariable, e); 
                                                            RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$13 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
                      
                                                            if(TablaSimbolos.float_int_variable(e).equals("VARIABLE")){
                                                                PLXC.out.println("error: El tam del array no puede ser una variable \nhalt;");
                                                                
                                                                System.exit(-1);
                                                            }

                                                            //Generator.salida(sym.IDENT,e ,null ,"$"+i+"_length");
                                                            TablaSimbolos.putArray(i, tipoVariable, e); 
                                                            RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$14 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
auxTipoArray=TablaSimbolos.getTipoArray(i);Generator.asig_Array_ALL=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Var ::= IDENT ACOR Expresion CCOR NT$13 IGUAL ALL NT$14 LeerElementosArray CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Generator.asig_Array_ALL=false;TablaSimbolos.putArray(t,TablaSimbolos.getTipoArray(i),String.valueOf(contador));TablaSimbolos.VolcarArrayAux_a_Original(i,t,contador);contador=0; RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Incr ::= MASMAS Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Generator.salida(sym.MASMAS, null, null, i); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Incr ::= Expresion MASMAS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                        String t=Generator.nuevaTemp();
                                        String tipo=TablaSimbolos.float_int_variable(i);
                                        String resul;
                                        if(tipo.equals("VARIABLE")){
                                            resul = TablaSimbolos.getTipo(i);
                                        }else{
                                            resul=tipo;
                                            
                                        }

                                        TablaSimbolos.put(t,resul); 
                                        Generator.salida(sym.IDENT,i,null,t);
                                        Generator.salida(sym.MASMAS, null, null, i); 
                                        RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Incr ::= MENOSMENOS Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Generator.salida(sym.MENOSMENOS, null, null, i); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Incr ::= Expresion MENOSMENOS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String t=Generator.nuevaTemp(); 
                                       String tipo=TablaSimbolos.float_int_variable(i);
                                       String resul;
                                       if(tipo.equals("VARIABLE")){
                                            resul = TablaSimbolos.getTipo(i);
                                       }else{
                                            resul=tipo;
                                            
                                       }

                                       TablaSimbolos.put(t,resul); 
                                       Generator.salida(sym.IDENT,i,null,t);
                                       Generator.salida(sym.MENOSMENOS, null, null, i); 
                                       RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Operador ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); //Todo esto es por si me pasaran por ejemplo 2.5 un numero, que esta en String, pues lo que hago es que mi funcion float_int_variable me devuelve FLOAT, si le paso una variable pues devuelve "VARIABLE" en este caso buscare en mi diccionario de que tipo es esa variable, es decir dependiendo de lo que reciba por e1 e2, tendre que buscar o no en mi diccionario
                                                          
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          //PLXC.out.println("variable: "+e1+"  "+e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]); 
                                                          TablaSimbolos.put(RESULT,resul);
                                                          Generator.salida(sym.MAS, e1, e2, RESULT);
                                                          //PLXC.out.println("RESULTADO OPERACION: "+resul);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Operador ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); 
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]); 
                                                          TablaSimbolos.put(RESULT,resul); 
                                                          Generator.salida(sym.MENOS, e1, e2, RESULT);
                                                          //PLXC.out.println("RESULTADO OPERACION: "+resul);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Operador ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); 
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]); 
                                                          TablaSimbolos.put(RESULT,resul); 
                                                          Generator.salida(sym.POR, e1, e2, RESULT);
                                                        //   PLXC.out.println("RESULTADO OPERACION: "+resul);
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Operador ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); 
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]); 
                                                          TablaSimbolos.put(RESULT,resul); 
                                                          Generator.salida(sym.DIV, e1, e2, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Operador ::= Expresion MOD Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp1 = Generator.nuevaTemp(); Generator.salida(sym.DIV, e1, e2, temp1); String temp2 = Generator.nuevaTemp(); Generator.salida(sym.POR, temp1, e2, temp2); temp1 = Generator.nuevaTemp(); Generator.salida(sym.MENOS, e1, temp2, temp1); RESULT = temp1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Condicion ::= Expresion EQ Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Condicion ::= Expresion NE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condicion ::= Expresion LT Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2,  RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Condicion ::= Expresion LE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1,  RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Condicion ::= Expresion GT Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1,  RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Condicion ::= Expresion GE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2,  RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= NOT Condicion 
            {
              DosEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.swap(); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$15 ::= 
            {
              DosEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Condicion ::= Condicion AND NT$15 Condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.f()); Generator.salida(Generator.GOTO, null, null, c2.f()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$16 ::= 
            {
              DosEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Condicion ::= Condicion OR NT$16 Condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.v()); Generator.salida(Generator.GOTO, null, null, c2.v()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condicion ::= AP Condicion CP 
            {
              DosEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExpresionForIN ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionForIN",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExpresionForIN ::= IDENT ACOR Expresion CCOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		auxIndice=e;RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionForIN",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$17 ::= 
            {
              String RESULT =null;
		int dosEtiqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dosEtiqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DosEtiquetas dosEtiq = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  
                                                                    //Por si la variable de control es de distinto tipo que el array lanzamos error
                                                                    if(!TablaSimbolos.getTipo_desde_VarOArray(e).equals(TablaSimbolos.getTipo_desde_VarOArray(e2))){
                                                                        PLXC.out.println("#Tipos incompatibles en for in \nerror;");
                                                                        System.exit(-1);
                                                                    }
                                                                    String etiq=Generator.nuevaLabel();
                                                                    String t=Generator.nuevaTemp();
                                                                    Generator.salida(sym.IDENT,"-1",null,t);
                                                                    Generator.salida(Generator.LABEL,null,null,dosEtiq.v()); 
                                                                    Generator.salida(sym.IDENT,t+" + 1",null,t);

                                                                    //Tenemos que recorrer un array sino da error.
                                                                    if(TablaSimbolos.existeArray(e2)){
                                                                        Generator.salida(Generator.IFGOTO, t+" < ", TablaSimbolos.getTamArray(e2),etiq); 
                                                                    }else{
                                                                        PLXC.out.println("#Tipo incorrecto, en el for in hay que recorrer un array \nerror;");
                                                                        System.exit(-1);
                                                                    }
                                                                    Generator.salida(Generator.GOTO, null, null, dosEtiq.f()); 
                                                                    Generator.salida(Generator.LABEL, null, null, etiq);

                                                                    //Por si la variable de control es algo asi: b[i]
                                                                    if(TablaSimbolos.existeArray(e)){
                                                                        String t3= Generator.nuevaTemp();
                                                                        Generator.salida(Generator.ASIG_ARRAY,e2,t,t3);
                                                                        Generator.salida(Generator.ARRAY,auxIndice,t3,e);
                                                                    }else{
                                                                        Generator.salida(Generator.ASIG_ARRAY,e2,t,e);
                                                                    }
                                                                    

                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // prForEspeciales ::= prFOR ExpresionForIN IN Expresion DO NT$17 ALL Sentencia CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dosEtiqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dosEtiqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas dosEtiq = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 Generator.salida(Generator.GOTO, null, null, dosEtiq.v()); Generator.salida(Generator.LABEL, null, null, dosEtiq.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prForEspeciales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$18 ::= 
            {
              String RESULT =null;
		int dosEtiqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dosEtiqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas dosEtiq = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxTipoArray=TablaSimbolos.float_int_variable(e); 
                                                        //Saco el tipo de e
                                                        if(auxTipoArray.equals("VARIABLE")){
                                                            if(TablaSimbolos.existeArray(e)){
                                                                auxTipoArray=TablaSimbolos.getTipoArray(e);
                                                            }else{
                                                                auxTipoArray=TablaSimbolos.getTipo(e);
                                                            }
                                                        }else{
                                                            auxTipoArray=auxTipoArray;

                                                        }

                                                        Generator.asig_Array_ALL=true;                                                        
                                                        
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$19 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dosEtiqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dosEtiqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas dosEtiq = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.asig_Array_ALL=false; TablaSimbolos.putArray(t2,auxTipo2,String.valueOf(contador));contador=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$20 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dosEtiqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dosEtiqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas dosEtiq = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
  //Por si la variable de control es de distinto tipo que el array lanzamos error
                                                                                                                                                                                                    
                                                                                                                                                                                                    // PLXC.out.println("TIPOS: "+TablaSimbolos.getTipo_desde_VarOArray(e)+"        "+TablaSimbolos.getTipo_desde_VarOArray(t2));
                                                                                                                                                                                                    if(!TablaSimbolos.getTipo_desde_VarOArray(e).equals(TablaSimbolos.getTipo_desde_VarOArray(t2))){
                                                                                                                                                                                                        PLXC.out.println("#Tipos incompatibles en for in \nerror;");
                                                                                                                                                                                                        System.exit(-1);
                                                                                                                                                                                                    } 
                                                                                                                                                                                                    String etiq=Generator.nuevaLabel();
                                                                                                                                                                                                    String t=Generator.nuevaTemp();
                                                                                                                                                                                                    Generator.salida(sym.IDENT,"-1",null,t);
                                                                                                                                                                                                    Generator.salida(Generator.LABEL,null,null,dosEtiq.v()); 
                                                                                                                                                                                                    Generator.salida(sym.IDENT,t+" + 1",null,t);

                                                                                                                                                                                                    //Tenemos que recorrer un array sino da error.
                                                                                                                                                                                                    if(TablaSimbolos.existeArray(t2)){
                                                                                                                                                                                                            Generator.salida(Generator.IFGOTO, t+" < ", TablaSimbolos.getTamArray(t2),etiq); 
                                                                                                                                                                                                    }else{
                                                                                                                                                                                                            PLXC.out.println("#Tipo incorrecto, en el for in hay que recorrer un array \nerror;");
                                                                                                                                                                                                            System.exit(-1);
                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                
                                                                                                                                                                                                    Generator.salida(Generator.GOTO, null, null, dosEtiq.f()); 
                                                                                                                                                                                                    Generator.salida(Generator.LABEL, null, null, etiq);

                                                                                                                                                                                                    //Por si la variable de control es algo asi: b[i]
                                                                                                                                                                                                    if(TablaSimbolos.existeArray(e)){
                                                                                                                                                                                                        String t3= Generator.nuevaTemp();
                                                                                                                                                                                                        Generator.salida(Generator.ASIG_ARRAY,t2,t,t3);
                                                                                                                                                                                                        Generator.salida(Generator.ARRAY,auxIndice,t3,e);
                                                                                                                                                                                                    }else{
                                                                                                                                                                                                        Generator.salida(Generator.ASIG_ARRAY,t2,t,e);
                                                                                                                                                                                                    }
                                                                                                                                                                                                    

                                                                                                                                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // prForEspeciales ::= prFOR ExpresionForIN IN ALL NT$18 LeerElementosArray CLL NT$19 DO NT$20 ALL Sentencia CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dosEtiqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int dosEtiqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		DosEtiquetas dosEtiq = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 Generator.salida(Generator.GOTO, null, null, dosEtiq.v()); Generator.salida(Generator.LABEL, null, null, dosEtiq.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prForEspeciales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // prIF ::= IF 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prIF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // prELSE ::= ELSE Sentencia 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // prELSE ::= 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // prDO ::= DO 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // prFOR ::= FOR 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // prWHILE ::= WHILE 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prWHILE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
