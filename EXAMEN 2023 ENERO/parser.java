
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\004\000\002\030\002" +
    "\000\002\031\002\000\002\003\012\000\002\032\002\000" +
    "\002\033\002\000\002\003\011\000\002\034\002\000\002" +
    "\035\002\000\002\003\013\000\002\036\002\000\002\037" +
    "\002\000\002\040\002\000\002\003\016\000\002\003\007" +
    "\000\002\003\003\000\002\041\002\000\002\003\006\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\006\000\002\004\003\000\002\042\002\000\002\004" +
    "\006\000\002\004\004\000\002\043\002\000\002\004\011" +
    "\000\002\044\002\000\002\004\011\000\002\045\002\000" +
    "\002\004\011\000\002\004\005\000\002\004\003\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\046\002\000\002\027\006\000\002\027\003" +
    "\000\002\016\005\000\002\016\003\000\002\047\002\000" +
    "\002\017\010\000\002\050\002\000\002\017\010\000\002" +
    "\007\005\000\002\007\003\000\002\051\002\000\002\023" +
    "\006\000\002\023\003\000\002\052\002\000\002\022\010" +
    "\000\002\021\003\000\002\021\003\000\002\021\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\011" +
    "\005\000\002\053\002\000\002\011\010\000\002\054\002" +
    "\000\002\011\006\000\002\011\003\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\004\000\002\055\002\000\002" +
    "\024\006\000\002\056\002\000\002\024\006\000\002\024" +
    "\005\000\002\057\002\000\002\020\014\000\002\005\003" +
    "\000\002\006\004\000\002\006\002\000\002\026\003\000" +
    "\002\025\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\050\002\ufffe\004\013\005\023\007\004\012" +
    "\022\014\016\016\006\017\021\021\036\022\032\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\034\007\004\012\022\014\050" +
    "\016\006\037\007\041\031\042\012\044\010\045\026\046" +
    "\035\047\037\050\011\051\027\001\002\000\004\012\274" +
    "\001\002\000\070\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\023\uffe7\025\222\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\052\uffe7\053\223\054\224" +
    "\055\225\056\220\057\221\001\002\000\006\013\uffc1\016" +
    "\uffc1\001\002\000\054\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\023\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\052\uffc2\001\002\000\006\013" +
    "\uffbf\016\uffbf\001\002\000\034\007\004\012\022\014\050" +
    "\016\006\037\007\041\031\042\012\044\010\045\026\046" +
    "\035\047\037\050\011\051\027\001\002\000\004\012\uff9c" +
    "\001\002\000\046\004\ufff6\005\ufff6\007\ufff6\012\ufff6\014" +
    "\ufff6\016\ufff6\017\ufff6\021\ufff6\022\ufff6\037\ufff6\041\ufff6" +
    "\042\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\001\002\000\054\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\013\uffda\014\uffda\015\uffda\023\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\052\uffda\001\002\000\050\004" +
    "\uffed\005\uffed\007\004\012\022\014\050\015\uffed\016\006" +
    "\017\uffed\021\uffed\022\uffed\037\007\041\031\042\012\044" +
    "\010\045\026\046\035\047\037\050\011\051\027\001\002" +
    "\000\054\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\023\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\052\uffd9\001\002\000\022\006\056\007\057" +
    "\010\061\011\060\023\203\041\055\042\054\043\053\001" +
    "\002\000\004\012\uffa1\001\002\000\034\007\004\012\022" +
    "\014\050\016\006\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\046" +
    "\004\uff9e\005\uff9e\007\uff9e\012\uff9e\014\uff9e\016\uff9e\017" +
    "\uff9e\021\uff9e\022\uff9e\037\uff9e\041\uff9e\042\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\001\002\000" +
    "\054\002\uffee\004\uffee\005\uffee\007\uffee\012\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\037" +
    "\uffee\041\uffee\042\uffee\044\uffee\045\uffee\046\uffee\047\uffee" +
    "\050\uffee\051\uffee\001\002\000\054\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\023\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\052\uffeb\001\002" +
    "\000\006\013\uffc0\016\uffc0\001\002\000\010\037\007\045" +
    "\026\050\011\001\002\000\052\002\000\004\000\005\000" +
    "\007\000\012\000\014\000\015\000\016\000\017\000\021" +
    "\000\022\000\037\000\041\000\042\000\044\000\045\000" +
    "\046\000\047\000\050\000\051\000\001\002\000\034\007" +
    "\004\012\022\014\050\016\006\037\007\041\031\042\012" +
    "\044\010\045\026\046\035\047\037\050\011\051\027\001" +
    "\002\000\004\012\167\001\002\000\054\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\023\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\052\uffdc\001" +
    "\002\000\050\002\165\004\013\005\023\007\004\012\022" +
    "\014\016\016\006\017\021\021\036\022\032\037\007\041" +
    "\031\042\012\044\010\045\026\046\035\047\037\050\011" +
    "\051\027\001\002\000\054\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\023\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\052\uffc4\001\002\000\004" +
    "\012\uff9d\001\002\000\054\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\023\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\052\uffc3\001\002\000\004" +
    "\012\143\001\002\000\004\012\ufff9\001\002\000\004\016" +
    "\044\001\002\000\054\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\013\uffea\014\uffea\015\uffea\023\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\052\uffea\001\002\000\056\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\023\uffb9\025\047\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\040\046\041\uffb9\042\uffb9" +
    "\043\uffb9\052\uffb9\001\002\000\054\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\023\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\052\uffe4\001\002" +
    "\000\004\016\uffbb\001\002\000\034\007\004\012\022\014" +
    "\050\016\006\037\007\041\031\042\012\044\010\045\026" +
    "\046\035\047\037\050\011\051\027\001\002\000\034\007" +
    "\004\012\022\014\050\016\006\037\007\041\031\042\012" +
    "\044\010\045\026\046\035\047\037\050\011\051\027\001" +
    "\002\000\054\006\056\007\057\010\061\011\060\013\uffbe" +
    "\014\uffbe\015\uffbe\023\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\040\052\041\055" +
    "\042\054\043\053\052\uffbe\001\002\000\004\016\uffbd\001" +
    "\002\000\034\007\004\012\022\014\050\016\006\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\054\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\013\uffb5\014\uffb5\015\uffb5\023\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\052\uffb5\001\002\000" +
    "\054\006\uffb7\007\uffb7\010\uffb7\011\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\023\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\052\uffb7\001\002\000\034\007\004\012\022\014" +
    "\050\016\006\037\007\041\031\042\012\044\010\045\026" +
    "\046\035\047\037\050\011\051\027\001\002\000\034\007" +
    "\004\012\022\014\050\016\006\037\007\041\031\042\012" +
    "\044\010\045\026\046\035\047\037\050\011\051\027\001" +
    "\002\000\034\007\004\012\022\014\050\016\006\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\034\007\004\012\022\014\050" +
    "\016\006\037\007\041\031\042\012\044\010\045\026\046" +
    "\035\047\037\050\011\051\027\001\002\000\054\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\013\uffb2\014\uffb2\015\uffb2\023" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\040\uffb2\041\055\042\054\043\uffb2\052" +
    "\uffb2\001\002\000\054\006\uffb1\007\uffb1\010\uffb1\011\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\023\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\040\uffb1" +
    "\041\055\042\054\043\uffb1\052\uffb1\001\002\000\054\006" +
    "\uffb3\007\uffb3\010\061\011\060\013\uffb3\014\uffb3\015\uffb3" +
    "\023\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\040\uffb3\041\055\042\054\043\053" +
    "\052\uffb3\001\002\000\054\006\uffb4\007\uffb4\010\061\011" +
    "\060\013\uffb4\014\uffb4\015\uffb4\023\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040" +
    "\uffb4\041\055\042\054\043\053\052\uffb4\001\002\000\054" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\023\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\040\uffb0\041\055\042\054\043" +
    "\uffb0\052\uffb0\001\002\000\004\016\044\001\002\000\054" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\023\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\052\uffbc\001\002\000\054\006\056\007\057\010\061" +
    "\011\060\013\uffd3\014\uffd3\015\uffd3\023\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\040\uffd3\041\055\042\054\043\053\052\uffd3\001\002\000" +
    "\006\015\074\040\073\001\002\000\034\007\004\012\022" +
    "\014\050\016\006\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\054" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\023\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\052\uffdb\001\002\000\054\006\056\007\057\010\061" +
    "\011\060\013\uffd4\014\uffd4\015\uffd4\023\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\040\uffd4\041\055\042\054\043\053\052\uffd4\001\002\000" +
    "\004\016\044\001\002\000\054\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\013\uffba\014\uffba\015\uffba\023\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\052\uffba\001\002\000" +
    "\004\012\101\001\002\000\036\007\004\012\105\014\050" +
    "\016\006\026\102\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\036" +
    "\007\004\012\105\014\050\016\006\026\102\037\007\041" +
    "\031\042\012\044\010\045\026\046\035\047\037\050\011" +
    "\051\027\001\002\000\010\013\ufff8\027\130\030\132\001" +
    "\002\000\034\006\056\007\057\010\061\011\060\031\117" +
    "\032\114\033\121\034\116\035\120\036\115\041\055\042" +
    "\054\043\053\001\002\000\036\007\004\012\105\014\050" +
    "\016\006\026\102\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\010" +
    "\013\131\027\130\030\132\001\002\000\036\006\056\007" +
    "\057\010\061\011\060\013\113\031\117\032\114\033\121" +
    "\034\116\035\120\036\115\041\055\042\054\043\053\001" +
    "\002\000\006\013\111\016\044\001\002\000\034\007\004" +
    "\012\022\014\050\016\006\037\007\041\031\042\012\044" +
    "\010\045\026\046\035\047\037\050\011\051\027\001\002" +
    "\000\054\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\023\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\052\uffe8\001\002\000\054\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\023\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\052\uffe9\001" +
    "\002\000\034\007\004\012\022\014\050\016\006\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\034\007\004\012\022\014\050" +
    "\016\006\037\007\041\031\042\012\044\010\045\026\046" +
    "\035\047\037\050\011\051\027\001\002\000\034\007\004" +
    "\012\022\014\050\016\006\037\007\041\031\042\012\044" +
    "\010\045\026\046\035\047\037\050\011\051\027\001\002" +
    "\000\034\007\004\012\022\014\050\016\006\037\007\041" +
    "\031\042\012\044\010\045\026\046\035\047\037\050\011" +
    "\051\027\001\002\000\034\007\004\012\022\014\050\016" +
    "\006\037\007\041\031\042\012\044\010\045\026\046\035" +
    "\047\037\050\011\051\027\001\002\000\034\007\004\012" +
    "\022\014\050\016\006\037\007\041\031\042\012\044\010" +
    "\045\026\046\035\047\037\050\011\051\027\001\002\000" +
    "\030\006\056\007\057\010\061\011\060\013\uffad\023\uffad" +
    "\027\uffad\030\uffad\041\055\042\054\043\053\001\002\000" +
    "\030\006\056\007\057\010\061\011\060\013\uffae\023\uffae" +
    "\027\uffae\030\uffae\041\055\042\054\043\053\001\002\000" +
    "\030\006\056\007\057\010\061\011\060\013\uffab\023\uffab" +
    "\027\uffab\030\uffab\041\055\042\054\043\053\001\002\000" +
    "\030\006\056\007\057\010\061\011\060\013\uffac\023\uffac" +
    "\027\uffac\030\uffac\041\055\042\054\043\053\001\002\000" +
    "\030\006\056\007\057\010\061\011\060\013\uffaf\023\uffaf" +
    "\027\uffaf\030\uffaf\041\055\042\054\043\053\001\002\000" +
    "\030\006\056\007\057\010\061\011\060\013\uffaa\023\uffaa" +
    "\027\uffaa\030\uffaa\041\055\042\054\043\053\001\002\000" +
    "\036\007\uffa8\012\uffa8\014\uffa8\016\uffa8\026\uffa8\037\uffa8" +
    "\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\001\002\000\012\013\uffa4\023\uffa4\027\uffa4" +
    "\030\uffa4\001\002\000\036\007\uffa6\012\uffa6\014\uffa6\016" +
    "\uffa6\026\uffa6\037\uffa6\041\uffa6\042\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\001\002\000\036\007" +
    "\004\012\105\014\050\016\006\026\102\037\007\041\031" +
    "\042\012\044\010\045\026\046\035\047\037\050\011\051" +
    "\027\001\002\000\012\013\uffa5\023\uffa5\027\130\030\uffa5" +
    "\001\002\000\036\007\004\012\105\014\050\016\006\026" +
    "\102\037\007\041\031\042\012\044\010\045\026\046\035" +
    "\047\037\050\011\051\027\001\002\000\012\013\uffa7\023" +
    "\uffa7\027\uffa7\030\uffa7\001\002\000\004\013\140\001\002" +
    "\000\046\004\013\005\023\007\004\012\022\014\016\016" +
    "\006\017\021\021\036\022\032\037\007\041\031\042\012" +
    "\044\010\045\026\046\035\047\037\050\011\051\027\001" +
    "\002\000\054\002\ufff7\004\ufff7\005\ufff7\007\ufff7\012\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\037\ufff7\041\ufff7\042\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\001\002\000\012\013\uffa9\023" +
    "\uffa9\027\uffa9\030\uffa9\001\002\000\034\007\004\012\022" +
    "\014\050\016\006\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\024" +
    "\006\056\007\057\010\061\011\060\023\ufff3\041\055\042" +
    "\054\043\053\052\146\001\002\000\004\023\155\001\002" +
    "\000\034\007\004\012\022\014\050\016\006\037\007\041" +
    "\031\042\012\044\010\045\026\046\035\047\037\050\011" +
    "\051\027\001\002\000\022\006\056\007\057\010\061\011" +
    "\060\013\150\041\055\042\054\043\053\001\002\000\004" +
    "\014\uffa3\001\002\000\004\014\152\001\002\000\046\004" +
    "\013\005\023\007\004\012\022\014\016\016\006\017\021" +
    "\021\036\022\032\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\004" +
    "\015\154\001\002\000\054\002\uffa2\004\uffa2\005\uffa2\007" +
    "\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\037\uffa2\041\uffa2\042\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\001\002\000\036" +
    "\007\004\012\105\014\050\016\006\026\102\037\007\041" +
    "\031\042\012\044\010\045\026\046\035\047\037\050\011" +
    "\051\027\001\002\000\010\023\ufff2\027\130\030\132\001" +
    "\002\000\004\023\160\001\002\000\034\007\004\012\022" +
    "\014\050\016\006\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\022" +
    "\006\056\007\057\010\061\011\060\013\ufff1\041\055\042" +
    "\054\043\053\001\002\000\004\013\163\001\002\000\046" +
    "\004\013\005\023\007\004\012\022\014\016\016\006\017" +
    "\021\021\036\022\032\037\007\041\031\042\012\044\010" +
    "\045\026\046\035\047\037\050\011\051\027\001\002\000" +
    "\054\002\ufff0\004\ufff0\005\ufff0\007\ufff0\012\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\037" +
    "\ufff0\041\ufff0\042\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\001\002\000\004\002\001\001\002\000" +
    "\052\002\uffff\004\uffff\005\uffff\007\uffff\012\uffff\014\uffff" +
    "\015\uffff\016\uffff\017\uffff\021\uffff\022\uffff\037\uffff\041" +
    "\uffff\042\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff" +
    "\051\uffff\001\002\000\034\007\004\012\022\014\050\016" +
    "\006\037\007\041\031\042\012\044\010\045\026\046\035" +
    "\047\037\050\011\051\027\001\002\000\022\006\056\007" +
    "\057\010\061\011\060\013\171\041\055\042\054\043\053" +
    "\001\002\000\004\023\172\001\002\000\054\002\uffef\004" +
    "\uffef\005\uffef\007\uffef\012\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\037\uffef\041\uffef\042" +
    "\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\001\002\000\054\006\uffb8\007\uffb8\010\uffb8\011\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\023\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\052\uffb8\001\002\000\004\016\176" +
    "\001\002\000\054\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\023\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\052\uffdd\001\002\000\054\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\023" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\040\177\041\uffd5\042\uffd5\043\uffd5\052" +
    "\uffd5\001\002\000\004\016\uffd7\001\002\000\004\016\176" +
    "\001\002\000\054\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\023\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\052\uffd6\001\002\000\022\006\056" +
    "\007\057\010\061\011\060\013\113\041\055\042\054\043" +
    "\053\001\002\000\054\002\ufffd\004\ufffd\005\ufffd\007\ufffd" +
    "\012\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\037\ufffd\041\ufffd\042\ufffd\044\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\001\002\000\050\004" +
    "\013\005\023\007\004\012\022\014\016\015\ufffe\016\006" +
    "\017\021\021\036\022\032\037\007\041\031\042\012\044" +
    "\010\045\026\046\035\047\037\050\011\051\027\001\002" +
    "\000\050\004\013\005\023\007\004\012\022\014\016\015" +
    "\206\016\006\017\021\021\036\022\032\037\007\041\031" +
    "\042\012\044\010\045\026\046\035\047\037\050\011\051" +
    "\027\001\002\000\054\002\uffec\004\uffec\005\uffec\007\uffec" +
    "\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\037\uffec\041\uffec\042\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\001\002\000\046\004" +
    "\013\005\023\007\004\012\022\014\016\016\006\017\021" +
    "\021\036\022\032\037\007\041\031\042\012\044\010\045" +
    "\026\046\035\047\037\050\011\051\027\001\002\000\004" +
    "\004\211\001\002\000\004\012\212\001\002\000\036\007" +
    "\004\012\105\014\050\016\006\026\102\037\007\041\031" +
    "\042\012\044\010\045\026\046\035\047\037\050\011\051" +
    "\027\001\002\000\010\013\214\027\130\030\132\001\002" +
    "\000\004\023\ufff5\001\002\000\004\023\216\001\002\000" +
    "\054\002\ufff4\004\ufff4\005\ufff4\007\ufff4\012\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\037" +
    "\ufff4\041\ufff4\042\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\001\002\000\054\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\023\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\052\uffb6\001\002" +
    "\000\036\007\uffc5\012\uffc5\014\227\015\230\016\uffc5\037" +
    "\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\001\002\000\036\007\uffc5\012\uffc5\014" +
    "\227\015\230\016\uffc5\037\uffc5\041\uffc5\042\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000" +
    "\034\007\uffe6\012\uffe6\014\252\016\uffe6\037\uffe6\041\uffe6" +
    "\042\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\001\002\000\036\007\uffc5\012\uffc5\014\227\015\230" +
    "\016\uffc5\037\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000\036\007\uffc5" +
    "\012\uffc5\014\227\015\230\016\uffc5\037\uffc5\041\uffc5\042" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\001\002\000\036\007\uffc5\012\uffc5\014\227\015\230\016" +
    "\uffc5\037\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\001\002\000\036\007\uffe3\012" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\037\uffe3\041\uffe3\042\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\001" +
    "\002\000\076\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\023\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\001\002" +
    "\000\076\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\023\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\001\002\000" +
    "\036\007\uffc5\012\uffc5\014\227\015\230\016\uffc5\037\uffc5" +
    "\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\001\002\000\034\007\004\012\022\014\050" +
    "\016\006\037\007\041\031\042\012\044\010\045\026\046" +
    "\035\047\037\050\011\051\027\001\002\000\054\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\013\uffc5\014\227\015\230\023" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\040\073\041\uffc5\042\uffc5\043\uffc5\052" +
    "\uffc5\001\002\000\054\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\023\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\052\uffe2\001\002\000\034\007" +
    "\uffc9\012\uffc9\014\uffc9\016\uffc9\037\uffc9\041\uffc9\042\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\001" +
    "\002\000\034\007\004\012\022\014\050\016\006\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\054\006\056\007\057\010\061" +
    "\011\060\013\uffca\014\uffca\015\uffca\023\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\040\242\041\055\042\054\043\053\052\uffca\001\002\000" +
    "\054\006\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\014\227" +
    "\015\230\023\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\052\uffc5\001\002\000\054\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\013\uffc8\014\uffc8\015\uffc8\023\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\052\uffc8\001\002" +
    "\000\034\007\uffcc\012\uffcc\014\uffcc\016\uffcc\037\uffcc\041" +
    "\uffcc\042\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\001\002\000\034\007\004\012\022\014\050\016" +
    "\006\037\007\041\031\042\012\044\010\045\026\046\035" +
    "\047\037\050\011\051\027\001\002\000\054\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\023\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\052\uffcb" +
    "\001\002\000\034\007\uffd0\012\uffd0\014\uffd0\016\uffd0\037" +
    "\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\001\002\000\034\007\004\012\022\014" +
    "\050\016\006\037\007\041\031\042\012\044\010\045\026" +
    "\046\035\047\037\050\011\051\027\001\002\000\054\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\014\227\015\230" +
    "\023\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\040\073\041\uffc5\042\uffc5\043\uffc5" +
    "\052\uffc5\001\002\000\054\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\023\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\052\uffcf\001\002\000\034" +
    "\007\004\012\022\014\050\016\006\037\007\041\031\042" +
    "\012\044\010\045\026\046\035\047\037\050\011\051\027" +
    "\001\002\000\034\007\uffd2\012\uffd2\014\uffd2\016\uffd2\037" +
    "\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\001\002\000\034\007\004\012\022\014" +
    "\050\016\006\037\007\041\031\042\012\044\010\045\026" +
    "\046\035\047\037\050\011\051\027\001\002\000\006\015" +
    "\255\040\073\001\002\000\054\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\013\uffd1\014\uffd1\015\uffd1\023\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\052\uffd1\001\002\000" +
    "\054\006\056\007\057\010\061\011\060\013\uffe5\014\uffe5" +
    "\015\uffe5\023\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\040\uffe5\041\055\042\054" +
    "\043\053\052\uffe5\001\002\000\036\007\uffdf\012\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\037\uffdf\041\uffdf\042\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002\000" +
    "\036\007\uffc5\012\uffc5\014\227\015\230\016\uffc5\037\uffc5" +
    "\041\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\001\002\000\034\007\004\012\022\014\050" +
    "\016\006\037\007\041\031\042\012\044\010\045\026\046" +
    "\035\047\037\050\011\051\027\001\002\000\054\006\056" +
    "\007\057\010\061\011\060\013\uffcd\014\uffcd\015\uffcd\023" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\040\uffcd\041\055\042\054\043\053\052" +
    "\uffcd\001\002\000\054\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\013\uffc5\014\227\015\230\023\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040\264" +
    "\041\uffc5\042\uffc5\043\uffc5\052\uffc5\001\002\000\034\007" +
    "\004\012\022\014\050\016\006\037\007\041\031\042\012" +
    "\044\010\045\026\046\035\047\037\050\011\051\027\001" +
    "\002\000\054\006\uffde\007\uffde\010\uffde\011\uffde\013\uffde" +
    "\014\uffde\015\uffde\023\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\052\uffde\001\002\000\054\006\056\007" +
    "\057\010\061\011\060\013\uffce\014\uffce\015\uffce\023\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\040\uffce\041\055\042\054\043\053\052\uffce" +
    "\001\002\000\036\007\uffe1\012\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\037\uffe1\041\uffe1\042\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\001\002\000\036\007\uffc5\012" +
    "\uffc5\014\227\015\230\016\uffc5\037\uffc5\041\uffc5\042\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\001" +
    "\002\000\034\007\004\012\022\014\050\016\006\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\054\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\013\uffc5\014\227\015\230\023\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\052\uffc5\001\002\000" +
    "\054\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\023\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\052\uffe0\001\002\000\036\007\004\012\105\014" +
    "\050\016\006\026\102\037\007\041\031\042\012\044\010" +
    "\045\026\046\035\047\037\050\011\051\027\001\002\000" +
    "\010\013\ufffc\027\130\030\132\001\002\000\004\013\277" +
    "\001\002\000\046\004\013\005\023\007\004\012\022\014" +
    "\016\016\006\017\021\021\036\022\032\037\007\041\031" +
    "\042\012\044\010\045\026\046\035\047\037\050\011\051" +
    "\027\001\002\000\054\002\ufffb\004\ufffb\005\ufffb\007\ufffb" +
    "\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\037\ufffb\041\ufffb\042\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\050\ufffb\051\ufffb\001\002\000\054\002" +
    "\uff9f\004\uff9f\005\uff9f\007\uff9f\012\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\302\021\uff9f\022\uff9f\037\uff9f\041" +
    "\uff9f\042\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\001\002\000\046\004\013\005\023\007\004\012" +
    "\022\014\016\016\006\017\021\021\036\022\032\037\007" +
    "\041\031\042\012\044\010\045\026\046\035\047\037\050" +
    "\011\051\027\001\002\000\054\002\ufffa\004\ufffa\005\ufffa" +
    "\007\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\037\ufffa\041\ufffa\042\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\001\002\000" +
    "\054\002\uffa0\004\uffa0\005\uffa0\007\uffa0\012\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\037" +
    "\uffa0\041\uffa0\042\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\050\uffa0\051\uffa0\001\002\000\054\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\023\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\052\uffd8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\036\002\033\003\027\004\017\005\004\010" +
    "\040\012\024\013\042\014\041\015\016\017\032\020\023" +
    "\022\014\025\037\026\013\001\001\000\020\004\304\012" +
    "\024\013\042\014\041\015\016\017\032\022\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\216\012\024" +
    "\013\042\014\041\015\016\017\032\022\014\001\001\000" +
    "\002\001\001\000\004\034\206\001\001\000\002\001\001" +
    "\000\024\004\070\012\024\013\042\014\041\015\016\016" +
    "\071\017\032\022\014\041\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\201\012" +
    "\024\013\042\014\107\015\016\017\032\022\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\173\001\001\000\002\001\001" +
    "\000\020\004\172\012\024\013\042\014\041\015\016\017" +
    "\032\022\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\165\004\017\005\004\010\040\012\024\013" +
    "\042\014\041\015\016\017\032\020\023\022\014\025\037" +
    "\026\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\077\001\001" +
    "\000\004\011\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\075\001\001\000\020" +
    "\004\050\012\024\013\042\014\041\015\016\017\032\022" +
    "\014\001\001\000\022\004\070\012\024\013\042\014\041" +
    "\015\016\016\071\017\032\022\014\001\001\000\002\001" +
    "\001\000\004\053\066\001\001\000\020\004\065\012\024" +
    "\013\042\014\041\015\016\017\032\022\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\064\012\024" +
    "\013\042\014\041\015\016\017\032\022\014\001\001\000" +
    "\020\004\063\012\024\013\042\014\041\015\016\017\032" +
    "\022\014\001\001\000\020\004\062\012\024\013\042\014" +
    "\041\015\016\017\032\022\014\001\001\000\020\004\061" +
    "\012\024\013\042\014\041\015\016\017\032\022\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\074\012\024\013\042\014\041\015\016\017" +
    "\032\022\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\103\012\024\013\042\014\041\015\016" +
    "\017\032\022\014\024\102\001\001\000\022\004\103\012" +
    "\024\013\042\014\041\015\016\017\032\022\014\024\141" +
    "\001\001\000\004\033\136\001\001\000\002\001\001\000" +
    "\022\004\106\012\024\013\042\014\107\015\016\017\032" +
    "\022\014\024\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\044\001\001\000\020\004\111\012\024" +
    "\013\042\014\041\015\016\017\032\022\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\126\012\024" +
    "\013\042\014\041\015\016\017\032\022\014\001\001\000" +
    "\020\004\125\012\024\013\042\014\041\015\016\017\032" +
    "\022\014\001\001\000\020\004\124\012\024\013\042\014" +
    "\041\015\016\017\032\022\014\001\001\000\020\004\123" +
    "\012\024\013\042\014\041\015\016\017\032\022\014\001" +
    "\001\000\020\004\122\012\024\013\042\014\041\015\016" +
    "\017\032\022\014\001\001\000\020\004\121\012\024\013" +
    "\042\014\041\015\016\017\032\022\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\134" +
    "\001\001\000\002\001\001\000\004\056\132\001\001\000" +
    "\022\004\103\012\024\013\042\014\041\015\016\017\032" +
    "\022\014\024\133\001\001\000\002\001\001\000\022\004" +
    "\103\012\024\013\042\014\041\015\016\017\032\022\014" +
    "\024\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\140\004\017\005\004\010\040\012\024\013\042" +
    "\014\041\015\016\017\032\020\023\022\014\025\037\026" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\143\012\024\013\042\014\041\015\016\017\032\022" +
    "\014\001\001\000\004\036\144\001\001\000\002\001\001" +
    "\000\020\004\146\012\024\013\042\014\041\015\016\017" +
    "\032\022\014\001\001\000\002\001\001\000\004\057\150" +
    "\001\001\000\002\001\001\000\034\003\152\004\017\005" +
    "\004\010\040\012\024\013\042\014\041\015\016\017\032" +
    "\020\023\022\014\025\037\026\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\103\012\024\013\042" +
    "\014\041\015\016\017\032\022\014\024\155\001\001\000" +
    "\004\037\156\001\001\000\002\001\001\000\020\004\160" +
    "\012\024\013\042\014\041\015\016\017\032\022\014\001" +
    "\001\000\004\040\161\001\001\000\002\001\001\000\034" +
    "\003\163\004\017\005\004\010\040\012\024\013\042\014" +
    "\041\015\016\017\032\020\023\022\014\025\037\026\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\167\012\024\013\042\014\041\015\016" +
    "\017\032\022\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\177\001\001\000\004\027\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\002\204\003" +
    "\027\004\017\005\004\010\040\012\024\013\042\014\041" +
    "\015\016\017\032\020\023\022\014\025\037\026\013\001" +
    "\001\000\034\003\165\004\017\005\004\010\040\012\024" +
    "\013\042\014\041\015\016\017\032\020\023\022\014\025" +
    "\037\026\013\001\001\000\002\001\001\000\034\003\207" +
    "\004\017\005\004\010\040\012\024\013\042\014\041\015" +
    "\016\017\032\020\023\022\014\025\037\026\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\103\012" +
    "\024\013\042\014\041\015\016\017\032\022\014\024\212" +
    "\001\001\000\002\001\001\000\004\035\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\266\001\001\000\004\021\256\001\001\000\004\042" +
    "\250\001\001\000\004\021\244\001\001\000\004\021\234" +
    "\001\001\000\004\021\225\001\001\000\004\043\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\231" +
    "\001\001\000\022\004\070\012\024\013\042\014\041\015" +
    "\016\016\232\017\032\022\014\001\001\000\004\021\233" +
    "\001\001\000\002\001\001\000\004\052\235\001\001\000" +
    "\022\004\236\012\024\013\042\014\041\015\016\017\032" +
    "\022\014\023\237\001\001\000\002\001\001\000\004\021" +
    "\240\001\001\000\002\001\001\000\004\051\242\001\001" +
    "\000\022\004\236\012\024\013\042\014\041\015\016\017" +
    "\032\022\014\023\243\001\001\000\002\001\001\000\004" +
    "\050\245\001\001\000\022\004\070\012\024\013\042\014" +
    "\041\015\016\016\246\017\032\022\014\001\001\000\004" +
    "\021\247\001\001\000\002\001\001\000\020\004\255\012" +
    "\024\013\042\014\041\015\016\017\032\022\014\001\001" +
    "\000\004\047\252\001\001\000\022\004\070\012\024\013" +
    "\042\014\041\015\016\016\253\017\032\022\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\257\001\001\000\004\021\260\001\001\000\022" +
    "\004\261\007\262\012\024\013\042\014\041\015\016\017" +
    "\032\022\014\001\001\000\002\001\001\000\004\021\264" +
    "\001\001\000\020\004\265\012\024\013\042\014\041\015" +
    "\016\017\032\022\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\267\001\001\000\004\021\270\001" +
    "\001\000\022\004\236\012\024\013\042\014\041\015\016" +
    "\017\032\022\014\023\271\001\001\000\004\021\272\001" +
    "\001\000\002\001\001\000\022\004\103\012\024\013\042" +
    "\014\041\015\016\017\032\022\014\024\274\001\001\000" +
    "\004\030\275\001\001\000\002\001\001\000\034\003\277" +
    "\004\017\005\004\010\040\012\024\013\042\014\041\015" +
    "\016\017\032\020\023\022\014\025\037\026\013\001\001" +
    "\000\004\031\300\001\001\000\004\006\302\001\001\000" +
    "\034\003\303\004\017\005\004\010\040\012\024\013\042" +
    "\014\041\015\016\017\032\020\023\022\014\025\037\026" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public DosEtiquetas dosEtiq;
    public String aux;
    public String tipoVariable;
    public int contador;
    public String auxTipoSet;
    public String auxSet;
    public String auxNombreSet;
    public String setAux;
    public int contador2=0;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Lista_de_Sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Lista_de_Sent ::= Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_de_Sent ::= Lista_de_Sent Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_Sent ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_Sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Sentencia ::= Expresion PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              String RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, iff); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= prIF AP Condicion NT$0 CP Sentencia NT$1 prELSE 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String iff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Generator.salida(Generator.LABEL, null, null, iff);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              String RESULT =null;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, whilee);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= prWHILE NT$2 AP Condicion NT$3 CP Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int whileeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whilee = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Generator.salida(Generator.GOTO, null, null, whilee); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              String RESULT =null;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, doo.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c.v()); Generator.salida(Generator.GOTO, null, null, doo.v()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= prDO NT$4 Sentencia WHILE AP Condicion CP NT$5 PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int dooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas doo = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
Generator.salida(Generator.LABEL, null, null, forr.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
Generator.salida(Generator.LABEL, null, null, forr.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
Generator.salida(Generator.GOTO, null, null, forr.v()); Generator.salida(Generator.LABEL, null, null, c.v());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= prFOR AP Expresion NT$6 PYC Condicion NT$7 PYC Expresion NT$8 CP Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int forrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		DosEtiquetas forr = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Generator.salida(Generator.GOTO, null, null, forr.f()); Generator.salida(Generator.LABEL, null, null, c.f());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 //Si es un print normal sacamos por pantalla, print var, pero si es un print de un character hay que sacar printc, mientras que si es un print de un set entonces hay que hacer la aranoya de SET que hay en generator
                                                            if(TablaSimbolos.esSet(e)){
                                                                Generator.salida(sym.SET, null, null, e);

                                                            }else if(TablaSimbolos.getTipo(e).equals("CHAR")){
                                                                Generator.salida(Generator.PRINTC,e,null,null);

                                                            }else{
                                                                Generator.salida(sym.PRINT, null, null, e);
                                                            }
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= prForEspeciales 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;
TablaSimbolos.anadirNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= ALL NT$9 Lista_de_Sent CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		TablaSimbolos.quitarNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= Operador 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expresion ::= Incr 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = var;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expresion ::= AP Ids CP Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 // (int)... MAS COSAS
                                                            String t = Generator.nuevaTemp();
                                                            String resCasteo="";

                                                            TablaSimbolos.put(t,i);                         //Guardamos var con su tipo
                                                            resCasteo=TablaSimbolos.castElemOVariable(e,i); //Casteamos el num a pelo o variable (dependiendo de lo que nos pasen)
                                                            TablaSimbolos.putElemVar(t, resCasteo);         //Guardamos var con su valor bien casteado
                                                            Generator.salida(sym.IDENT, e, i, t ); 
                                                            RESULT=t;

                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  //Compruebo si existe en nuestro dict de de sets y nuestro dic de var
                                                            if(TablaSimbolos.esSet(i)){ //Para comprobar si esta declarada (guardada en nuestro dict)
                                                                RESULT = i;
                                                            }else{                            //Var normal, la cual si no existe el get dara error
                                                                RESULT = i + TablaSimbolos.get(i);
                                                            }
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$10 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
auxNombreSet=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= IDENT IGUAL NT$10 Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                            String var=TablaSimbolos.quitarAmbito(i); //Le quito el ambito a todo por si acaso, ya que en mi dict lo guardo todo sin ambito, pero a la hora de imprimir hay que hacerlo con el ambito!
                                                            String var_a_Asignar=TablaSimbolos.quitarAmbito(e);
                                                            
                                                            if(TablaSimbolos.esSet(i)){
                                                                RESULT=i;
                                                                auxSet=i;
                                                            }else{
                                                                RESULT = i + TablaSimbolos.get(i);
                                                            }
                                                            // PLXC.out.println("SET "+i+"  "+TablaSimbolos.esSet(i)+ " SET2: "+e+"  "+TablaSimbolos.esSet(e));
                                                            if(TablaSimbolos.comprobacionASIG_SET(i,e)){ // a=b siendo a y b arrays
                                                                    
                                                                    TablaSimbolos.VolcarArrayAux_a_Original_SET(i,e,true);
                                                           
                                                            }else{ // int x ; x=5.7 ERROR /// float x ; x=5 BIEN --> x= (float) 5
                                                                String[] tipos = TablaSimbolos.calcGetTipos(var,var_a_Asignar); //Devuelve el tipo de i , e //FLOAT,INT
                                                                String   tipo  = TablaSimbolos.comprobarCompatibilidadTipos(tipos[0],var_a_Asignar);// Si son incompatibles salta error, sino
                                                                String resCasteo=TablaSimbolos.getElemVar(var_a_Asignar); //Si "e" es un numero a pelo, devuelve ese numero, si es una variable su valor asociado
                                                                // PLXC.out.println("tipos--> "+i+": "+tipos[0]+"   "+e+": "+tipos[1]);
                                                                // PLXC.out.println("RESULTADO OPERACION TIPO: "+tipo);
                                                                // PLXC.out.println("DENTRO 3");

                                                                if (tipo.equals("CASTING")){
                                                                    resCasteo=TablaSimbolos.castElemOVariable(var_a_Asignar,tipos[0]); //Casteamos el num a pelo o variable (dependiendo de lo que nos pasen)
                                                                    TablaSimbolos.putElemVar(i,resCasteo);
                                                                    Generator.salida(sym.IDENT, e, tipos[0], RESULT );
                                                                
                                                                }else{
                                                                    Generator.salida(sym.IDENT, e, null, RESULT);
                                                                    TablaSimbolos.putElemVar(i,resCasteo);

                                                                }
                                                            }


                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= Ids Var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$11 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxTipoSet=TablaSimbolos.getTipoSet(i);auxSet=i; Generator.asig_Array_ALL=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= IDENT OPADDUNION prAll NT$11 prAll LeerElementosSet prAll 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     
                                                            
                                                                                                                                                          Generator.asig_Array_ALL=false;
                                                                                                                                                          TablaSimbolos.VolcarArrayAux_a_Original_SET(i,t,false);
                                                                                                                                                          contador=0;
                                                                                                                                                          RESULT=i;
                                 
                                
                                                                                                                                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$12 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxSet=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresion ::= IDENT OPRESTA prAll NT$12 prAll LeerParaBorrarElem_set prAll 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$13 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxSet=i;Generator.asig_Array_ALL=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresion ::= IDENT OPINTER prAll NT$13 prAll LeerParaInter_set prAll 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		TablaSimbolos.VolcarArrayAux_a_Original_SET(i,t,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= SET Ids declarar_set 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= AsignarElem_a_Set 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= ALL LeerElementosSet CLL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= RemoveElem_set 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= RecogerBasico 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); Generator.salida(sym.MINUS, e, null, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$14 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.putSet(i,tipoVariable);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declarar_set ::= IDENT COMA NT$14 declarar_set 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_set",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declarar_set ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.putSet(i,tipoVariable);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_set",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LeerElementosSet ::= LeerElementosSet COMA Expresion 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.putElementoSet(t,e); Generator.salida(Generator.ARRAY,String.valueOf(contador),e ,t); contador++ ;RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerElementosSet",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LeerElementosSet ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                         
                                                           if(TablaSimbolos.esSet(e)){
                                                                RESULT=e;
                                                            }else{
                                                                String t_aux=Generator.nuevaTemp(); //Array auxiliar para guardarlo todo
                                                                TablaSimbolos.putSet(t_aux,auxTipoSet);
                                                                TablaSimbolos.putElementoSet(t_aux,e);
                                                                //Meto el elemento en el set original
                                                                // TablaSimbolos.putElementoSet(auxSet,e);
                                                                Generator.salida(Generator.ARRAY,String.valueOf(contador),e ,t_aux); // x[i] = algo
                                                                contador++;
                                                                RESULT=t_aux;

                                                            }

                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerElementosSet",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$15 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxTipoSet=TablaSimbolos.getTipoSet(i);auxSet=i; Generator.asig_Array_ALL=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AsignarElem_a_Set ::= IDENT IGUAL ALL NT$15 LeerElementosSet CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Generator.asig_Array_ALL=false;TablaSimbolos.VolcarArrayAux_a_Original_SET(i,t,false);contador=0; RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsignarElem_a_Set",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$16 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxTipoSet=TablaSimbolos.getTipoSet(i);auxSet=i; Generator.asig_Array_ALL=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AsignarElem_a_Set ::= IDENT OPADD prAll NT$16 LeerElementosSet prAll 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
                                                                                                                                                          Generator.asig_Array_ALL=false;
                                                                                                                                                          TablaSimbolos.VolcarArrayAux_a_Original_SET(i,t,false);
                                                                                                                                                          contador=0;
                                                                                                                                                          RESULT=i;
                                 
                                
                                                                                                                                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AsignarElem_a_Set",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LeerParaInter_set ::= LeerParaInter_set COMA Expresion 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.operatoriaInterElementoSet(auxSet, e,t,contador2);contador2++; RESULT=t;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerParaInter_set",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LeerParaInter_set ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String t=Generator.nuevaTemp();
                                        TablaSimbolos.putSet(t,"INT");
                                        TablaSimbolos.operatoriaInterElementoSet(auxSet, e,t,contador2); 
                                        contador2++;
                                        RESULT=t;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerParaInter_set",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$17 ::= 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.operatoriaBorrarElementoSet(auxSet, e);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LeerParaBorrarElem_set ::= Expresion COMA NT$17 LeerParaBorrarElem_set 
            {
              String RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerParaBorrarElem_set",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LeerParaBorrarElem_set ::= Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.operatoriaBorrarElementoSet(auxSet, e);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LeerParaBorrarElem_set",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$18 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxSet=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RemoveElem_set ::= IDENT OPREMOVE prAll NT$18 LeerParaBorrarElem_set prAll 
            {
              String RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RemoveElem_set",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // prAll ::= ALL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prAll",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // prAll ::= CLL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prAll",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prAll ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prAll",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RecogerBasico ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecogerBasico",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RecogerBasico ::= REAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecogerBasico",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RecogerBasico ::= LETRA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RecogerBasico",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Ids ::= INT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="INT";     tipoVariable="INT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Ids ::= FLOAT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="FLOAT";   tipoVariable="FLOAT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Ids ::= CHAR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="CHAR";    tipoVariable="CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ids",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Var ::= IDENT IGUAL Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.put(i, tipoVariable); TablaSimbolos.putElemVar(i,e); Generator.salida(sym.IDENT, e, null, i+TablaSimbolos.get(i) ); RESULT = i+TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$19 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.put(i, tipoVariable); TablaSimbolos.putElemVar(i,e); Generator.salida(sym.IDENT, e, null, i+TablaSimbolos.get(i) ); RESULT = i+TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Var ::= IDENT IGUAL Expresion COMA NT$19 Var 
            {
              String RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$20 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
TablaSimbolos.put(i, tipoVariable);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Var ::= IDENT COMA NT$20 Var 
            {
              String RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Var ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		TablaSimbolos.put(i, tipoVariable); RESULT = i+TablaSimbolos.get(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Incr ::= MASMAS Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                        Generator.salida(sym.MASMAS, null, null, i); 
                                        TablaSimbolos.putElemVarMASMAS(i);  //sumamos uno al valor asociado de la variable  
                                        RESULT = i; 
                                        
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Incr ::= Expresion MASMAS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                        String t=Generator.nuevaTemp();
                                        String tipo=TablaSimbolos.float_int_char_variable(i);
                                        String resul;
                                        if(tipo.equals("VARIABLE")){
                                            resul = TablaSimbolos.getTipo(i);
                                        }else{
                                            resul=tipo;

                                        }

                                        TablaSimbolos.put(t,resul);
                                        TablaSimbolos.putElemVar(t,i);
                                        TablaSimbolos.putElemVarMASMAS(i);

                                        Generator.salida(sym.IDENT,i,null,t);
                                        Generator.salida(sym.MASMAS, null, null, i);
                                        RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Incr ::= MENOSMENOS Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Generator.salida(sym.MENOSMENOS, null, null, i); RESULT = i; 
                                       TablaSimbolos.putElemVarMENOSMENOS(i); 
                                        RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Incr ::= Expresion MENOSMENOS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String t=Generator.nuevaTemp();
                                       String tipo=TablaSimbolos.float_int_char_variable(i);
                                       String resul;
                                       if(tipo.equals("VARIABLE")){
                                            resul = TablaSimbolos.getTipo(i);
                                       }else{
                                            resul=tipo;

                                       }

                                       TablaSimbolos.put(t,resul);
                                       TablaSimbolos.putElemVar(t,i);
                                       TablaSimbolos.putElemVarMASMAS(i);
                                       Generator.salida(sym.IDENT,i,null,t);
                                       Generator.salida(sym.MENOSMENOS, null, null, i);
                                       RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Incr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Operador ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp(); //Todo esto es por si me pasaran por ejemplo 2.5 un numero, que esta en String, pues lo que hago es que mi funcion float_int_char_variable me devuelve FLOAT, si le paso una variable pues devuelve "VARIABLE" en este caso buscare en mi diccionario de que tipo es esa variable, es decir dependiendo de lo que reciba por e1 e2, tendre que buscar o no en mi diccionario
                                                         
                                                        //  PLXC.out.println("E1: "+e1+" E2: "+e2);
                                                         if(TablaSimbolos.esSet(e1) || TablaSimbolos.esSet(e2)){
                                                            // PLXC.out.println("AUX NOMBRE SET: "+auxNombreSet);
                                                            if(!TablaSimbolos.float_int_char_variable(e1).equals("VARIABLE")){
                                                                // PLXC.out.println("DENTRO");
                                                                // TablaSimbolos.putElementoSet(e2,e1);
                                                                String t= Generator.nuevaTemp();
                                                                TablaSimbolos.putSet(t,null);
                                                                TablaSimbolos.VolcarArrayAux_a_Original_SET(t,e2,true);
                                                                Generator.salida(Generator.ARRAY,String.valueOf(TablaSimbolos.getUltPosSet(e2)),e1,e2);
                                                                RESULT = e2;
                                                            }else if(!TablaSimbolos.float_int_char_variable(e2).equals("VARIABLE")){
                                                                // PLXC.out.println("DENTRO2");
                                                                String t= Generator.nuevaTemp();
                                                                TablaSimbolos.putSet(t,null);
                                                                TablaSimbolos.VolcarArrayAux_a_Original_SET(t,e1,true);
                                                                // TablaSimbolos.putElementoSet(e1,e2);
                                                                Generator.salida(Generator.ARRAY,String.valueOf(TablaSimbolos.getUltPosSet(e1)),e2,t);
                                                                RESULT = e1;
                                                            }else{
                                                                String setUnion="";
                                                                setUnion=TablaSimbolos.aplicarOperacion(e1,e2, auxNombreSet,"UNION");
                                                                RESULT = setUnion;
                                                            }

                                                           
                                                         }else{
                                                                
                                                                String[] tipos = TablaSimbolos.calcGetTipos(e1,e2); //Dentro de esta func se le quita el ambito
                                                                //   PLXC.out.println("variable: "+e1+"  "+e2);
                                                                String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]);

                                                                //Lo del split es por lo de los ambito, si nos pasan algo asi: a_2 quitarle el _2, y buscar solo la "a" en nuestro dict ya que la guardamos asi, solo usamos a_2 para imprimir
                                                                String ee1=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e1)); //Si son num a pelos, te devuelve ese num a pelo, si es variable su elemento asociado
                                                                String ee2=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e2));
                                                                //   PLXC.out.println("AMBITO VAR1 QUITADO: "+TablaSimbolos.quitarAmbito(e1)+ "  ///  AMBITO VAR2 QUITADO: "+TablaSimbolos.quitarAmbito(e2));
                                                                String resulOperacion="";

                                                                //   PLXC.out.println("VALOR ELEMENTO "+e1+ ": " +ee1 + "   VALOR ELEMENTO  "+e2+": "+ee2 );

                                                                TablaSimbolos.put(RESULT,resul); //Metemos variable con su tipo
                                                                if(resul.equals("INT")){
                                                                    resulOperacion=String.valueOf(Integer.parseInt(ee1)+Integer.parseInt(ee2));
                                                                    // PLXC.out.println("DENTRO --> VALOR ELEMENTO "+e1+ ": " +ee1 + "   VALOR ELEMENTO  "+e2+": "+ee2+ " -- APLICAMOS SUMA-->" +Integer.parseInt(ee1)+" + "+Integer.parseInt(ee2)+" = "+resulOperacion);
                                                                    TablaSimbolos.putElemVar(RESULT,resulOperacion); //Metemos variable con su valor asociado correspondiente
                                                                }else{
                                                                    resulOperacion=String.valueOf(Double.parseDouble(ee1)+Double.parseDouble(ee2));
                                                                    TablaSimbolos.putElemVar(RESULT,String.valueOf(Double.parseDouble(ee1)+Double.parseDouble(ee2)));
                                                                }

                                                                Generator.salida(sym.MAS, e1, e2, RESULT);
                                                                
                                                                //PLXC.out.println("RESULTADO OPERACION: "+resul);
                                                        
                                                        
                                                        }
                                                        
                                                        
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Operador ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            
                                                        if(TablaSimbolos.esSet(e1) || TablaSimbolos.esSet(e2)){
                                                               if(!TablaSimbolos.float_int_char_variable(e1).equals("VARIABLE")){
                                                                // PLXC.out.println("DENTRO");
                                                                // TablaSimbolos.putElementoSet(e2,e1);
                                                                String t= Generator.nuevaTemp();
                                                                TablaSimbolos.putSet(t,null);
                                                                TablaSimbolos.VolcarArrayAux_a_Original_SET(t,e2,true);
                                                                Generator.salida(Generator.ARRAY,String.valueOf(TablaSimbolos.getUltPosSet(e2)),e1,e2);
                                                                RESULT = e2;
                                                            }else if(!TablaSimbolos.float_int_char_variable(e2).equals("VARIABLE")){
                                                                // PLXC.out.println("DENTRO2");
                                                                String t= Generator.nuevaTemp();
                                                                TablaSimbolos.putSet(t,null);
                                                                TablaSimbolos.VolcarArrayAux_a_Original_SET(t,e1,true);
                                                                // TablaSimbolos.putElementoSet(e1,e2);
                                                                Generator.salida(Generator.ARRAY,String.valueOf(TablaSimbolos.getUltPosSet(e1)),e2,t);
                                                                RESULT = e1;
                                                            }else{
                                                                String setUnion="";
                                                                setUnion=TablaSimbolos.aplicarOperacion(e1,e2, auxNombreSet,"RESTA");
                                                                RESULT = setUnion;
                                                            }
                                                            
            
            
                                                         }else{

                                                                RESULT = Generator.nuevaTemp();
                                                                String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                                String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]);
                                                                String ee1=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e1)); //Si son num a pelos, te devuelve ese num a pelo, si es variable su elemento asociado
                                                                String ee2=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e2));
                                                                String resulOperacion="";

                                                                TablaSimbolos.put(RESULT,resul); //Metemos variable con su tipo
                                                                if(resul.equals("INT")){
                                                                    resulOperacion=String.valueOf(Integer.parseInt(ee1)-Integer.parseInt(ee2));
                                                                    TablaSimbolos.putElemVar(RESULT,resulOperacion); //Metemos variable con su valor asociado correspondiente
                                                                }else{
                                                                    resulOperacion=String.valueOf(Double.parseDouble(ee1)-Double.parseDouble(ee2));
                                                                    TablaSimbolos.putElemVar(RESULT,String.valueOf(Double.parseDouble(ee1)+Double.parseDouble(ee2)));
                                                                }

                                                                Generator.salida(sym.MENOS, e1, e2, RESULT);
                                                         }
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Operador ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                        if(TablaSimbolos.esSet(e1) || TablaSimbolos.esSet(e2)){
                                                                if(!TablaSimbolos.float_int_char_variable(e1).equals("VARIABLE")){
                                                                // PLXC.out.println("DENTRO");
                                                                // TablaSimbolos.putElementoSet(e2,e1);
                                                                String t= Generator.nuevaTemp();
                                                                TablaSimbolos.putSet(t,null);
                                                                TablaSimbolos.VolcarArrayAux_a_Original_SET(t,e2,true);
                                                                Generator.salida(Generator.ARRAY,String.valueOf(TablaSimbolos.getUltPosSet(e2)),e1,e2);
                                                                RESULT = e2;
                                                            }else if(!TablaSimbolos.float_int_char_variable(e2).equals("VARIABLE")){
                                                                // PLXC.out.println("DENTRO2");
                                                                String t= Generator.nuevaTemp();
                                                                TablaSimbolos.putSet(t,null);
                                                                TablaSimbolos.VolcarArrayAux_a_Original_SET(t,e1,true);
                                                                // TablaSimbolos.putElementoSet(e1,e2);
                                                                Generator.salida(Generator.ARRAY,String.valueOf(TablaSimbolos.getUltPosSet(e1)),e2,t);
                                                                RESULT = e1;
                                                            }else{
                                                                String setUnion="";
                                                                setUnion=TablaSimbolos.aplicarOperacion(e1,e2, auxNombreSet,"INTERSECCION");
                                                                RESULT = setUnion;
                                                            }
                                                            
                                                        
                                                        
                                                        
                                                        
                                                        }else{
                                                          RESULT = Generator.nuevaTemp();
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]);
                                                          String ee1=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e1)); //Si son num a pelos, te devuelve ese num a pelo, si es variable su elemento asociado
                                                          String ee2=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e2));
                                                          String resulOperacion="";

                                                          TablaSimbolos.put(RESULT,resul); //Metemos variable con su tipo
                                                          if(resul.equals("INT")){
                                                            resulOperacion=String.valueOf(Integer.parseInt(ee1)*Integer.parseInt(ee2));
                                                            TablaSimbolos.putElemVar(RESULT,resulOperacion); //Metemos variable con su valor asociado correspondiente
                                                          }else{
                                                            resulOperacion=String.valueOf(Double.parseDouble(ee1)*Double.parseDouble(ee2));
                                                            TablaSimbolos.putElemVar(RESULT,String.valueOf(Double.parseDouble(ee1)+Double.parseDouble(ee2)));
                                                          }

                                                          Generator.salida(sym.POR, e1, e2, RESULT);
                                                        }
                                                         
                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Operador ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Generator.nuevaTemp();
                                                          String[] tipos = TablaSimbolos.calcGetTipos(e1,e2);
                                                          String resul = TablaSimbolos.tipoResultanteDeOperacion(tipos[0],tipos[1]);
                                                          String ee1=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e1)); //Si son num a pelos, te devuelve ese num a pelo, si es variable su elemento asociado
                                                          String ee2=TablaSimbolos.getElemVar(TablaSimbolos.quitarAmbito(e2));
                                                          String resulOperacion="";

                                                          TablaSimbolos.put(RESULT,resul); //Metemos variable con su tipo
                                                          if(resul.equals("INT")){
                                                            resulOperacion=String.valueOf(Integer.parseInt(ee1)/Integer.parseInt(ee2));
                                                            TablaSimbolos.putElemVar(RESULT,resulOperacion); //Metemos variable con su valor asociado correspondiente
                                                          }else{
                                                            resulOperacion=String.valueOf(Double.parseDouble(ee1)/Double.parseDouble(ee2));
                                                            TablaSimbolos.putElemVar(RESULT,String.valueOf(Double.parseDouble(ee1)+Double.parseDouble(ee2)));
                                                          }

                                                          Generator.salida(sym.DIV, e1, e2, RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Operador ::= Expresion MOD Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String temp1 = Generator.nuevaTemp(); Generator.salida(sym.DIV, e1, e2, temp1); String temp2 = Generator.nuevaTemp(); Generator.salida(sym.POR, temp1, e2, temp2); temp1 = Generator.nuevaTemp(); Generator.salida(sym.MENOS, e1, temp2, temp1); RESULT = temp1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operador",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condicion ::= Expresion EQ Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Condicion ::= Expresion NE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" == ", e2, RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Condicion ::= Expresion LT Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2,  RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condicion ::= Expresion LE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1,  RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Condicion ::= Expresion GT Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e2+" < ", e1,  RESULT.v()); Generator.salida(Generator.GOTO, null, null, RESULT.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Condicion ::= Expresion GE Expresion 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DosEtiquetas(); Generator.salida(Generator.IFGOTO, e1+" < ", e2,  RESULT.f()); Generator.salida(Generator.GOTO, null, null, RESULT.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Condicion ::= NOT Condicion 
            {
              DosEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.swap(); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$21 ::= 
            {
              DosEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Condicion ::= Condicion AND NT$21 Condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.f()); Generator.salida(Generator.GOTO, null, null, c2.f()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$22 ::= 
            {
              DosEtiquetas RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
Generator.salida(Generator.LABEL, null, null, c1.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Condicion ::= Condicion OR NT$22 Condicion 
            {
              DosEtiquetas RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (DosEtiquetas) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DosEtiquetas c1 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DosEtiquetas c2 = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Generator.salida(Generator.LABEL, null, null, c1.v()); Generator.salida(Generator.GOTO, null, null, c2.v()); RESULT = c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Condicion ::= AP Condicion CP 
            {
              DosEtiquetas RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$23 ::= 
            {
              String RESULT =null;
		int dosEtiqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dosEtiqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DosEtiquetas dosEtiq = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                                                                    //Por si la variable de control es de distinto tipo que el array lanzamos error
                                                                    String tipoe1=TablaSimbolos.getTipo_desde_VarOSet(e);
                                                                    String tipoe2=TablaSimbolos.getTipo_desde_VarOSet(e2);
                                                                    if(!tipoe1.equals(tipoe2)){
                                                                        PLXC.out.println("#Tipos incompatibles en for in \nerror;");
                                                                        System.exit(-1);
                                                                    }
                                                                    String etiq=Generator.nuevaLabel();
                                                                    String t=Generator.nuevaTemp();
                                                                    Generator.salida(sym.IDENT,"-1",null,t);
                                                                    Generator.salida(Generator.LABEL,null,null,dosEtiq.v());
                                                                    Generator.salida(sym.IDENT,t+" + 1",null,t);

                                                                    //Tenemos que recorrer un set sino da error.
                                                                    if(TablaSimbolos.esSet(e2)){
                                                                        Generator.salida(Generator.IFGOTO, t+" < ", TablaSimbolos.getTamSet(e2),etiq);
                                                                    }else{
                                                                        PLXC.out.println("#Tipo incorrecto, en el for in hay que recorrer un set \nerror;");
                                                                        System.exit(-1);
                                                                    }
                                                                    Generator.salida(Generator.GOTO, null, null, dosEtiq.f());
                                                                    Generator.salida(Generator.LABEL, null, null, etiq);


                                                                    Generator.salida(Generator.ASIG_ARRAY,e2,t,e);


                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // prForEspeciales ::= prFOR AP Expresion DOSPUNTOS Expresion CP NT$23 ALL Sentencia CLL 
            {
              String RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dosEtiqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dosEtiqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		DosEtiquetas dosEtiq = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 Generator.salida(Generator.GOTO, null, null, dosEtiq.v()); Generator.salida(Generator.LABEL, null, null, dosEtiq.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prForEspeciales",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // prIF ::= IF 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prIF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // prELSE ::= ELSE Sentencia 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // prELSE ::= 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prELSE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // prDO ::= DO 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prDO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // prFOR ::= FOR 
            {
              DosEtiquetas RESULT =null;
		RESULT = new DosEtiquetas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prFOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // prWHILE ::= WHILE 
            {
              String RESULT =null;
		RESULT = Generator.nuevaLabel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prWHILE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
